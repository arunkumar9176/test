{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Build a multiple linear regression model for the prediction of demand for shared bikes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem Statement :"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A bike-sharing system is a service in which bikes are made available for shared use to individuals on a short term basis for a price or free. Many bike share systems allow people to borrow a bike from a \"dock\" which is usually computer-controlled wherein the user enters the payment information, and the system unlocks it. This bike can then be returned to another dock belonging to the same system.\n",
    "\n",
    "\n",
    "A US bike-sharing provider BoomBikes has recently suffered considerable dips in their revenues due to the ongoing Corona pandemic. The company is finding it very difficult to sustain in the current market scenario. So, it has decided to come up with a mindful business plan to be able to accelerate its revenue as soon as the ongoing lockdown comes to an end, and the economy restores to a healthy state. \n",
    "\n",
    "\n",
    "In such an attempt, BoomBikes aspires to understand the demand for shared bikes among the people after this ongoing quarantine situation ends across the nation due to Covid-19. They have planned this to prepare themselves to cater to the people's needs once the situation gets better all around and stand out from other service providers and make huge profits.\n",
    "\n",
    "\n",
    "They have contracted a consulting company to understand the factors on which the demand for these shared bikes depends. Specifically, they want to understand the factors affecting the demand for these shared bikes in the American market. The company wants to know:\n",
    "\n",
    "- Which variables are significant in predicting the demand for shared bikes.\n",
    "- How well those variables describe the bike demands\n",
    "\n",
    "Based on various meteorological surveys and people's styles, the service provider firm has gathered a large dataset on daily bike demands across the American market based on some factors. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Business Goal:\n",
    "You are required to model the demand for shared bikes with the available independent variables. It will be used by the management to understand how exactly the demands vary with different features. They can accordingly manipulate the business strategy to meet the demand levels and meet the customer's expectations. Further, the model will be a good way for management to understand the demand dynamics of a new market. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation:\n",
    "\n",
    "You can observe in the dataset that some of the variables like 'weathersit' and 'season' have values as 1, 2, 3, 4 which have specific labels associated with them (as can be seen in the data dictionary). These numeric values associated with the labels may indicate that there is some order to them - which is actually not the case (Check the data dictionary and think why). So, it is advisable to convert such feature values into categorical string values before proceeding with model building. Please refer the data dictionary to get a better understanding of all the independent variables.\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You might notice the column 'yr' with two values 0 and 1 indicating the years 2018 and 2019 respectively. At the first instinct, you might think it is a good idea to drop this column as it only has two values so it might not be a value-add to the model. But in reality, since these bike-sharing systems are slowly gaining popularity, the demand for these bikes is increasing every year proving that the column 'yr' might be a good variable for prediction. So think twice before dropping it. \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Building\n",
    "\n",
    "In the dataset provided, you will notice that there are three columns named 'casual', 'registered', and 'cnt'. The variable 'casual' indicates the number casual users who have made a rental. The variable 'registered' on the other hand shows the total number of registered users who have made a booking on a given day. Finally, the 'cnt' variable indicates the total number of bike rentals, including both casual and registered. The model should be built taking this 'cnt' as the target variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation:\n",
    "When you're done with model building and residual analysis and have made predictions on the test set, just make sure you use the following two lines of code to calculate the R-squared score on the test set.\n",
    "\n",
    "\n",
    "from sklearn.metrics import r2_score<br>\n",
    "r2_score(y_test, y_pred)\n",
    " \n",
    "\n",
    "where y_test is the test data set for the target variable, and y_pred is the variable containing the predicted values of the target variable on the test set.\n",
    "Please don't forget to perform this step as the R-squared score on the test set holds some marks. The variable names inside the 'r2_score' function can be different based on the variable names you have chosen.\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Submissions Expected:\n",
    "\n",
    "- Python Notebook: One Python notebook with the whole linear model, predictions, and evaluation.\n",
    "- Subjective Questions PDF: Apart from the Python notebook, you also need to answer some subjective questions related to linear regression which can be downloaded from the file below. Answer these questions and submit it as a PDF. \n",
    "- Note: There are some questions in the subjective questions doc that you might not be familiar with. So you're expected to research these questions and give an appropriate answer in order to expand your learnings of this topic."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "# Reading and Understanding the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing numpy, pandas\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# To supress warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#notebook setting to display all the rowns and columns to have better clearity on the data.\n",
    "\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)\n",
    "pd.set_option('display.expand_frame_repr', False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instant</th>\n",
       "      <th>dteday</th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>01-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>331</td>\n",
       "      <td>654</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>02-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>131</td>\n",
       "      <td>670</td>\n",
       "      <td>801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>03-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>120</td>\n",
       "      <td>1229</td>\n",
       "      <td>1349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>04-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>108</td>\n",
       "      <td>1454</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>05-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>82</td>\n",
       "      <td>1518</td>\n",
       "      <td>1600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   instant      dteday  season  yr  mnth  holiday  weekday  workingday  weathersit       temp     atemp      hum  windspeed  casual  registered   cnt\n",
       "0        1  01-01-2018       1   0     1        0        1           1           2  14.110847  18.18125  80.5833  10.749882     331         654   985\n",
       "1        2  02-01-2018       1   0     1        0        2           1           2  14.902598  17.68695  69.6087  16.652113     131         670   801\n",
       "2        3  03-01-2018       1   0     1        0        3           1           1   8.050924   9.47025  43.7273  16.636703     120        1229  1349\n",
       "3        4  04-01-2018       1   0     1        0        4           1           1   8.200000  10.60610  59.0435  10.739832     108        1454  1562\n",
       "4        5  05-01-2018       1   0     1        0        5           1           1   9.305237  11.46350  43.6957  12.522300      82        1518  1600"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reading the day.csv file and assiging a dataframe bike.\n",
    "\n",
    "bike = pd.read_csv('day.csv')\n",
    "bike.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(730, 16)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# shape of the dataframe\n",
    "\n",
    "bike.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 730 entries, 0 to 729\n",
      "Data columns (total 16 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   instant     730 non-null    int64  \n",
      " 1   dteday      730 non-null    object \n",
      " 2   season      730 non-null    int64  \n",
      " 3   yr          730 non-null    int64  \n",
      " 4   mnth        730 non-null    int64  \n",
      " 5   holiday     730 non-null    int64  \n",
      " 6   weekday     730 non-null    int64  \n",
      " 7   workingday  730 non-null    int64  \n",
      " 8   weathersit  730 non-null    int64  \n",
      " 9   temp        730 non-null    float64\n",
      " 10  atemp       730 non-null    float64\n",
      " 11  hum         730 non-null    float64\n",
      " 12  windspeed   730 non-null    float64\n",
      " 13  casual      730 non-null    int64  \n",
      " 14  registered  730 non-null    int64  \n",
      " 15  cnt         730 non-null    int64  \n",
      "dtypes: float64(4), int64(11), object(1)\n",
      "memory usage: 91.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# bike information\n",
    "bike.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instant</th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "      <td>730.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>365.500000</td>\n",
       "      <td>2.498630</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>6.526027</td>\n",
       "      <td>0.028767</td>\n",
       "      <td>2.995890</td>\n",
       "      <td>0.690411</td>\n",
       "      <td>1.394521</td>\n",
       "      <td>20.319259</td>\n",
       "      <td>23.726322</td>\n",
       "      <td>62.765175</td>\n",
       "      <td>12.763620</td>\n",
       "      <td>849.249315</td>\n",
       "      <td>3658.757534</td>\n",
       "      <td>4508.006849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>210.877136</td>\n",
       "      <td>1.110184</td>\n",
       "      <td>0.500343</td>\n",
       "      <td>3.450215</td>\n",
       "      <td>0.167266</td>\n",
       "      <td>2.000339</td>\n",
       "      <td>0.462641</td>\n",
       "      <td>0.544807</td>\n",
       "      <td>7.506729</td>\n",
       "      <td>8.150308</td>\n",
       "      <td>14.237589</td>\n",
       "      <td>5.195841</td>\n",
       "      <td>686.479875</td>\n",
       "      <td>1559.758728</td>\n",
       "      <td>1936.011647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.424346</td>\n",
       "      <td>3.953480</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.500244</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>22.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>183.250000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.811885</td>\n",
       "      <td>16.889713</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>9.041650</td>\n",
       "      <td>316.250000</td>\n",
       "      <td>2502.250000</td>\n",
       "      <td>3169.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>365.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.465826</td>\n",
       "      <td>24.368225</td>\n",
       "      <td>62.625000</td>\n",
       "      <td>12.125325</td>\n",
       "      <td>717.000000</td>\n",
       "      <td>3664.500000</td>\n",
       "      <td>4548.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>547.750000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>26.880615</td>\n",
       "      <td>30.445775</td>\n",
       "      <td>72.989575</td>\n",
       "      <td>15.625589</td>\n",
       "      <td>1096.500000</td>\n",
       "      <td>4783.250000</td>\n",
       "      <td>5966.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>730.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>35.328347</td>\n",
       "      <td>42.044800</td>\n",
       "      <td>97.250000</td>\n",
       "      <td>34.000021</td>\n",
       "      <td>3410.000000</td>\n",
       "      <td>6946.000000</td>\n",
       "      <td>8714.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          instant      season          yr        mnth     holiday     weekday  workingday  weathersit        temp       atemp         hum   windspeed       casual   registered          cnt\n",
       "count  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000  730.000000   730.000000   730.000000   730.000000\n",
       "mean   365.500000    2.498630    0.500000    6.526027    0.028767    2.995890    0.690411    1.394521   20.319259   23.726322   62.765175   12.763620   849.249315  3658.757534  4508.006849\n",
       "std    210.877136    1.110184    0.500343    3.450215    0.167266    2.000339    0.462641    0.544807    7.506729    8.150308   14.237589    5.195841   686.479875  1559.758728  1936.011647\n",
       "min      1.000000    1.000000    0.000000    1.000000    0.000000    0.000000    0.000000    1.000000    2.424346    3.953480    0.000000    1.500244     2.000000    20.000000    22.000000\n",
       "25%    183.250000    2.000000    0.000000    4.000000    0.000000    1.000000    0.000000    1.000000   13.811885   16.889713   52.000000    9.041650   316.250000  2502.250000  3169.750000\n",
       "50%    365.500000    3.000000    0.500000    7.000000    0.000000    3.000000    1.000000    1.000000   20.465826   24.368225   62.625000   12.125325   717.000000  3664.500000  4548.500000\n",
       "75%    547.750000    3.000000    1.000000   10.000000    0.000000    5.000000    1.000000    2.000000   26.880615   30.445775   72.989575   15.625589  1096.500000  4783.250000  5966.000000\n",
       "max    730.000000    4.000000    1.000000   12.000000    1.000000    6.000000    1.000000    3.000000   35.328347   42.044800   97.250000   34.000021  3410.000000  6946.000000  8714.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking numerical columns statistics\n",
    "\n",
    "bike.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **730 rows and 16 columns.**\n",
    "- **from data dictionary we understood that:**\n",
    "    - instant is just a record index, this column can be removed.\n",
    "    - dteday is date column and we already have month and year columns in dataframe. thus we can drop dteday columnas it not bringing any new information.\n",
    "    - addition of casual and registered columns gives cnt column, and we will not going to get much information from these columns, thus we wil drop these two as well.\n",
    "- **there seems to be no missing values from non-null value count.**\n",
    "- **TARGET variable/column is 'cnt'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['instant', 'dteday', 'season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit', 'temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt'], dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking all the columns\n",
    "bike.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# renaming columns for better visibility\n",
    "bike.rename(columns={'season':'Season','yr':'Year','mnth':'Month','hum':'Humidity',\n",
    "                     'weathersit':'Weather','cnt':'Count'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instant</th>\n",
       "      <th>dteday</th>\n",
       "      <th>Season</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>Weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>01-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>331</td>\n",
       "      <td>654</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>02-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>131</td>\n",
       "      <td>670</td>\n",
       "      <td>801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>03-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>120</td>\n",
       "      <td>1229</td>\n",
       "      <td>1349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>04-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>108</td>\n",
       "      <td>1454</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>05-01-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>82</td>\n",
       "      <td>1518</td>\n",
       "      <td>1600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   instant      dteday  Season  Year  Month  holiday  weekday  workingday  Weather       temp     atemp  Humidity  windspeed  casual  registered  Count\n",
       "0        1  01-01-2018       1     0      1        0        1           1        2  14.110847  18.18125   80.5833  10.749882     331         654    985\n",
       "1        2  02-01-2018       1     0      1        0        2           1        2  14.902598  17.68695   69.6087  16.652113     131         670    801\n",
       "2        3  03-01-2018       1     0      1        0        3           1        1   8.050924   9.47025   43.7273  16.636703     120        1229   1349\n",
       "3        4  04-01-2018       1     0      1        0        4           1        1   8.200000  10.60610   59.0435  10.739832     108        1454   1562\n",
       "4        5  05-01-2018       1     0      1        0        5           1        1   9.305237  11.46350   43.6957  12.522300      82        1518   1600"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking new names\n",
    "bike.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "# Exploratory Data Anlysis\n",
    "\n",
    "## Data Visualisation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.1. Categorical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries for visualization purpose\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Season</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>Weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>1349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>1600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Season  Year  Month  holiday  weekday  workingday  Weather       temp     atemp  Humidity  windspeed  Count\n",
       "0       1     0      1        0        1           1        2  14.110847  18.18125   80.5833  10.749882    985\n",
       "1       1     0      1        0        2           1        2  14.902598  17.68695   69.6087  16.652113    801\n",
       "2       1     0      1        0        3           1        1   8.050924   9.47025   43.7273  16.636703   1349\n",
       "3       1     0      1        0        4           1        1   8.200000  10.60610   59.0435  10.739832   1562\n",
       "4       1     0      1        0        5           1        1   9.305237  11.46350   43.6957  12.522300   1600"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating new df by removing uneccessary/extra columns and assigning new dataframe bike_1 with remaining columns\n",
    "\n",
    "nec_cols = ['Season', 'Year', 'Month', 'holiday', 'weekday', 'workingday', 'Weather', 'temp', 'atemp', \n",
    "            'Humidity', 'windspeed','Count']\n",
    "\n",
    "bike_1 = bike[nec_cols]\n",
    "bike_1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**As observerd, all the columns are of numerical type, but from the data dictionary we see that there are some columns which represents categorical data as well.**\n",
    "- **Binary Types : Year, holiday, workingday**\n",
    "- **Categorical Types: Season, Month, weekday, Weather**\n",
    "- **Numeric types: temp, atemp, Humidity, windspeed, Count**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping proper names for better visibilty\n",
    "# season (1:spring, 2:summer, 3:fall, 4:winter)\n",
    "\n",
    "bike_1['Season'] = bike_1['Season'].map({1:'spring',2:'summer',3:'fall',4:'winter'})\n",
    "\n",
    "\n",
    "# Visualising Seasons count of rented bikes\n",
    "\n",
    "plt.figure(figsize=[10,4])\n",
    "sns.barplot(bike_1['Season'],bike_1['Count'])\n",
    "plt.title('Seasons Average Count', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **In fall, there seems to be highest demand of rented the bikes, followed by Summer and Winter**\n",
    "- **Spring seems to be the least season where people rent bikes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping Year varible proper names for better visibilty\n",
    "\n",
    "bike_1['Year'] = bike_1['Year'].map({0:'2018',1:'2019'})\n",
    "\n",
    "\n",
    "# Visualising Yearly count of rented bikes\n",
    "\n",
    "sns.barplot(bike_1['Year'],bike_1['Count'])\n",
    "plt.title('Yearly Average Count', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **We can observe a trend here, average rented bikes has increased in 2019 almost double that of 2018**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping Month varible proper names for better visibilty\n",
    "\n",
    "bike_1['Month'] = bike_1['Month'].map({1:'Jan',2:'Feb',3:'Mar',4:'April',\n",
    "                                       5:'May',6:'June',7:'July',8:'Aug',\n",
    "                                       9:'Sept',10:'Oct',11:'Nov',12:'Dec'})\n",
    "\n",
    "\n",
    "# Visualising Monthly count of rented bikes\n",
    "\n",
    "plt.figure(figsize=[14,5])\n",
    "sns.barplot(bike_1['Month'],bike_1['Count'])\n",
    "plt.title('Monthly Average Count', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **More and almost similar average count of rented bikes in August, June, September, July followed by May, October. Company should make sure they prepare with high availability during these months**\n",
    "- **December, January, February have the least demand probably due to winter season**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping weekday variable proper names for better visibilty\n",
    "\n",
    "bike_1['weekday'] = bike_1['weekday'].map({0:'Mon',1:'Tues',2:'Wed',3:'Thurs',4:'Fri',5:'Sat',6:'Sun'})\n",
    "\n",
    "# Visualising Daily count of rented bikes\n",
    "\n",
    "plt.figure(figsize=[14,5])\n",
    "sns.barplot(bike_1['weekday'],bike_1['Count'])\n",
    "plt.title('Average Daily Count', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **looks like all days have similar demands, but still Sunday, Monday, Saturday, Friday has high demands than other days**\n",
    "- **People less prefer rented bike on Thrusday, Wednesday,Tuesday**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping workingday varible proper names for better visibilty\n",
    "\n",
    "bike_1['workingday'] = bike_1['workingday'].map({0:'No',1:'Yes'})\n",
    "\n",
    "# Visualising Working day count of rented bikes\n",
    "\n",
    "sns.barplot(bike_1['workingday'],bike_1['Count'])\n",
    "\n",
    "plt.title('Working Day Average Count', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **There are similar demands whether it's a working day or not.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping Weather varible proper names for better visibilty\n",
    "\n",
    "#weathersit : \n",
    "# 1: Clear, Few clouds, Partly cloudy   = Good/Clear\n",
    "# 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist = Moderate/Mist\n",
    "# 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds  = Bad/Light Rain\n",
    "# 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog = Worse/Heavy Rain\n",
    "\n",
    "\n",
    "bike_1['Weather'] = bike_1['Weather'].map({1:\"Good/Clear\",2:'Moderate/Misty',3:'Bad/LightRain',4:'Worse/HeavyRain'})\n",
    "\n",
    "\n",
    "# Visualising Daily count of rented bikes\n",
    "\n",
    "plt.figure(figsize=[12,5])\n",
    "sns.barplot(bike_1['Weather'],bike_1['Count'])\n",
    "plt.title('Average Count depending on Weather', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **It clearly shows that if the weather is clear, the demand is more**\n",
    "- **If the weather is bad, demand decreases drastically**\n",
    "- **Company should leverage and look up for forecast of weather to fullfill demands**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mapping Holiday varible proper names for better visibilty\n",
    "\n",
    "bike_1['holiday'] = bike_1['holiday'].map({0:'No',1:'Yes'})\n",
    "\n",
    "# Visualising Holiday wise count of rented bikes\n",
    "\n",
    "plt.figure(figsize=[7,4])\n",
    "sns.barplot(bike_1['holiday'],bike_1['Count'])\n",
    "plt.title('Average Count depending on Holidays', fontsize = 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "- **There is high decrease of demand if it is a holiday**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "### 1.1.2. Numerical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(bike_1, x_vars=['temp','atemp','Humidity','windspeed'], y_vars='Count',size=4, aspect=1, kind='scatter', diag_kind = None)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insight:**\n",
    "- **as can be seen from above plots, there is some linear relation between temp, atemp with Count.**\n",
    "- **this shows that we can do linear regression for solving the problem.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "**Independent variables which could be a good predictor from EDA are:**\n",
    "- **temp**\n",
    "- **Weather**\n",
    "- **Months**\n",
    "- **Seasons**\n",
    "- **workingday**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "# Data Preparation\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a list and putting all category columns in to it and converting them to category data type\n",
    "\n",
    "cat = ['Season', 'Year', 'Month', 'holiday', 'weekday', 'workingday', 'Weather']\n",
    "\n",
    "for i in cat:\n",
    "    bike_1[i] = bike_1[i].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 730 entries, 0 to 729\n",
      "Data columns (total 12 columns):\n",
      " #   Column      Non-Null Count  Dtype   \n",
      "---  ------      --------------  -----   \n",
      " 0   Season      730 non-null    category\n",
      " 1   Year        730 non-null    category\n",
      " 2   Month       730 non-null    category\n",
      " 3   holiday     730 non-null    category\n",
      " 4   weekday     730 non-null    category\n",
      " 5   workingday  730 non-null    category\n",
      " 6   Weather     730 non-null    category\n",
      " 7   temp        730 non-null    float64 \n",
      " 8   atemp       730 non-null    float64 \n",
      " 9   Humidity    730 non-null    float64 \n",
      " 10  windspeed   730 non-null    float64 \n",
      " 11  Count       730 non-null    int64   \n",
      "dtypes: category(7), float64(4), int64(1)\n",
      "memory usage: 35.0 KB\n"
     ]
    }
   ],
   "source": [
    "# checking converted datatypes\n",
    "\n",
    "bike_1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Aug</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Feb</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_June</th>\n",
       "      <th>Month_Mar</th>\n",
       "      <th>Month_May</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Oct</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>weekday_Mon</th>\n",
       "      <th>weekday_Sat</th>\n",
       "      <th>weekday_Sun</th>\n",
       "      <th>weekday_Thurs</th>\n",
       "      <th>weekday_Tues</th>\n",
       "      <th>weekday_Wed</th>\n",
       "      <th>workingday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Season_spring  Season_summer  Season_winter  Year_2019  Month_Aug  Month_Dec  Month_Feb  Month_Jan  Month_July  Month_June  Month_Mar  Month_May  Month_Nov  Month_Oct  Month_Sept  holiday_Yes  weekday_Mon  weekday_Sat  weekday_Sun  weekday_Thurs  weekday_Tues  weekday_Wed  workingday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "0              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             1            0               1                   0                       1\n",
       "1              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             0            1               1                   0                       1\n",
       "2              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              1             0            0               1                   1                       0\n",
       "3              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             0            0               1                   1                       0\n",
       "4              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            1            0              0             0            0               1                   1                       0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for Linear model creating dummies\n",
    "\n",
    "dummy = pd.get_dummies(bike_1[cat], drop_first=True)\n",
    "dummy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Season</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>Weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Aug</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Feb</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_June</th>\n",
       "      <th>Month_Mar</th>\n",
       "      <th>Month_May</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Oct</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>weekday_Mon</th>\n",
       "      <th>weekday_Sat</th>\n",
       "      <th>weekday_Sun</th>\n",
       "      <th>weekday_Thurs</th>\n",
       "      <th>weekday_Tues</th>\n",
       "      <th>weekday_Wed</th>\n",
       "      <th>workingday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>spring</td>\n",
       "      <td>2018</td>\n",
       "      <td>Jan</td>\n",
       "      <td>No</td>\n",
       "      <td>Tues</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate/Misty</td>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>985</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>spring</td>\n",
       "      <td>2018</td>\n",
       "      <td>Jan</td>\n",
       "      <td>No</td>\n",
       "      <td>Wed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate/Misty</td>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>801</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spring</td>\n",
       "      <td>2018</td>\n",
       "      <td>Jan</td>\n",
       "      <td>No</td>\n",
       "      <td>Thurs</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Good/Clear</td>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>1349</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>spring</td>\n",
       "      <td>2018</td>\n",
       "      <td>Jan</td>\n",
       "      <td>No</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Good/Clear</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>1562</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>spring</td>\n",
       "      <td>2018</td>\n",
       "      <td>Jan</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Good/Clear</td>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>1600</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Season  Year Month holiday weekday workingday         Weather       temp     atemp  Humidity  windspeed  Count  Season_spring  Season_summer  Season_winter  Year_2019  Month_Aug  Month_Dec  Month_Feb  Month_Jan  Month_July  Month_June  Month_Mar  Month_May  Month_Nov  Month_Oct  Month_Sept  holiday_Yes  weekday_Mon  weekday_Sat  weekday_Sun  weekday_Thurs  weekday_Tues  weekday_Wed  workingday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "0  spring  2018   Jan      No    Tues        Yes  Moderate/Misty  14.110847  18.18125   80.5833  10.749882    985              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             1            0               1                   0                       1\n",
       "1  spring  2018   Jan      No     Wed        Yes  Moderate/Misty  14.902598  17.68695   69.6087  16.652113    801              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             0            1               1                   0                       1\n",
       "2  spring  2018   Jan      No   Thurs        Yes      Good/Clear   8.050924   9.47025   43.7273  16.636703   1349              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              1             0            0               1                   1                       0\n",
       "3  spring  2018   Jan      No     Fri        Yes      Good/Clear   8.200000  10.60610   59.0435  10.739832   1562              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             0            0               1                   1                       0\n",
       "4  spring  2018   Jan      No     Sat        Yes      Good/Clear   9.305237  11.46350   43.6957  12.522300   1600              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            1            0              0             0            0               1                   1                       0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combining both the dataframe, bike_1 and of dummy variables\n",
    "\n",
    "bike_new = pd.concat([bike_1,dummy], axis=1)\n",
    "bike_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dropping columns from which dummy varibles were created\n",
    "\n",
    "bike_new.drop(cat, axis=1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Aug</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Feb</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_June</th>\n",
       "      <th>Month_Mar</th>\n",
       "      <th>Month_May</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Oct</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>weekday_Mon</th>\n",
       "      <th>weekday_Sat</th>\n",
       "      <th>weekday_Sun</th>\n",
       "      <th>weekday_Thurs</th>\n",
       "      <th>weekday_Tues</th>\n",
       "      <th>weekday_Wed</th>\n",
       "      <th>workingday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.110847</td>\n",
       "      <td>18.18125</td>\n",
       "      <td>80.5833</td>\n",
       "      <td>10.749882</td>\n",
       "      <td>985</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.902598</td>\n",
       "      <td>17.68695</td>\n",
       "      <td>69.6087</td>\n",
       "      <td>16.652113</td>\n",
       "      <td>801</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.050924</td>\n",
       "      <td>9.47025</td>\n",
       "      <td>43.7273</td>\n",
       "      <td>16.636703</td>\n",
       "      <td>1349</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.200000</td>\n",
       "      <td>10.60610</td>\n",
       "      <td>59.0435</td>\n",
       "      <td>10.739832</td>\n",
       "      <td>1562</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.305237</td>\n",
       "      <td>11.46350</td>\n",
       "      <td>43.6957</td>\n",
       "      <td>12.522300</td>\n",
       "      <td>1600</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        temp     atemp  Humidity  windspeed  Count  Season_spring  Season_summer  Season_winter  Year_2019  Month_Aug  Month_Dec  Month_Feb  Month_Jan  Month_July  Month_June  Month_Mar  Month_May  Month_Nov  Month_Oct  Month_Sept  holiday_Yes  weekday_Mon  weekday_Sat  weekday_Sun  weekday_Thurs  weekday_Tues  weekday_Wed  workingday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "0  14.110847  18.18125   80.5833  10.749882    985              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             1            0               1                   0                       1\n",
       "1  14.902598  17.68695   69.6087  16.652113    801              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             0            1               1                   0                       1\n",
       "2   8.050924   9.47025   43.7273  16.636703   1349              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              1             0            0               1                   1                       0\n",
       "3   8.200000  10.60610   59.0435  10.739832   1562              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            0            0              0             0            0               1                   1                       0\n",
       "4   9.305237  11.46350   43.6957  12.522300   1600              1              0              0          0          0          0          0          1           0           0          0          0          0          0           0            0            0            1            0              0             0            0               1                   1                       0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bike_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 730 entries, 0 to 729\n",
      "Data columns (total 30 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   temp                    730 non-null    float64\n",
      " 1   atemp                   730 non-null    float64\n",
      " 2   Humidity                730 non-null    float64\n",
      " 3   windspeed               730 non-null    float64\n",
      " 4   Count                   730 non-null    int64  \n",
      " 5   Season_spring           730 non-null    uint8  \n",
      " 6   Season_summer           730 non-null    uint8  \n",
      " 7   Season_winter           730 non-null    uint8  \n",
      " 8   Year_2019               730 non-null    uint8  \n",
      " 9   Month_Aug               730 non-null    uint8  \n",
      " 10  Month_Dec               730 non-null    uint8  \n",
      " 11  Month_Feb               730 non-null    uint8  \n",
      " 12  Month_Jan               730 non-null    uint8  \n",
      " 13  Month_July              730 non-null    uint8  \n",
      " 14  Month_June              730 non-null    uint8  \n",
      " 15  Month_Mar               730 non-null    uint8  \n",
      " 16  Month_May               730 non-null    uint8  \n",
      " 17  Month_Nov               730 non-null    uint8  \n",
      " 18  Month_Oct               730 non-null    uint8  \n",
      " 19  Month_Sept              730 non-null    uint8  \n",
      " 20  holiday_Yes             730 non-null    uint8  \n",
      " 21  weekday_Mon             730 non-null    uint8  \n",
      " 22  weekday_Sat             730 non-null    uint8  \n",
      " 23  weekday_Sun             730 non-null    uint8  \n",
      " 24  weekday_Thurs           730 non-null    uint8  \n",
      " 25  weekday_Tues            730 non-null    uint8  \n",
      " 26  weekday_Wed             730 non-null    uint8  \n",
      " 27  workingday_Yes          730 non-null    uint8  \n",
      " 28  Weather_Good/Clear      730 non-null    uint8  \n",
      " 29  Weather_Moderate/Misty  730 non-null    uint8  \n",
      "dtypes: float64(4), int64(1), uint8(25)\n",
      "memory usage: 46.5 KB\n"
     ]
    }
   ],
   "source": [
    "bike_new.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Now there are total of 30 columns, we will start model building now"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train - Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing statsmodel and sklearn libraries for Linear regression model building\n",
    "\n",
    "import sklearn\n",
    "import statsmodels.api as sm\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# splitting the date into two train and test dataframes\n",
    "\n",
    "df_train_bike_new, df_test_bike_new = train_test_split(bike_new, train_size=0.70, random_state=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(510, 30)\n",
      "(220, 30)\n"
     ]
    }
   ],
   "source": [
    "# verify the columns and rows\n",
    "\n",
    "print(df_train_bike_new.shape)\n",
    "print(df_test_bike_new.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rescaling the features\n",
    "\n",
    "- using MinMax Scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing MinMax scaler from preprocessing module of sklearn library\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining a variable scaler for minmax scaling\n",
    "\n",
    "scaler = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['temp', 'atemp', 'Humidity', 'windspeed', 'Count', 'Season_spring', 'Season_summer', 'Season_winter', 'Year_2019', 'Month_Aug', 'Month_Dec', 'Month_Feb', 'Month_Jan', 'Month_July', 'Month_June', 'Month_Mar', 'Month_May', 'Month_Nov', 'Month_Oct', 'Month_Sept', 'holiday_Yes', 'weekday_Mon', 'weekday_Sat', 'weekday_Sun', 'weekday_Thurs', 'weekday_Tues', 'weekday_Wed', 'workingday_Yes', 'Weather_Good/Clear', 'Weather_Moderate/Misty'], dtype='object')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bike_new.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>576</th>\n",
       "      <td>0.815169</td>\n",
       "      <td>0.766351</td>\n",
       "      <td>0.725633</td>\n",
       "      <td>0.264686</td>\n",
       "      <td>0.827658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>0.442393</td>\n",
       "      <td>0.438975</td>\n",
       "      <td>0.640189</td>\n",
       "      <td>0.255342</td>\n",
       "      <td>0.465255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>0.245101</td>\n",
       "      <td>0.200348</td>\n",
       "      <td>0.498067</td>\n",
       "      <td>0.663106</td>\n",
       "      <td>0.204096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>482</th>\n",
       "      <td>0.395666</td>\n",
       "      <td>0.391735</td>\n",
       "      <td>0.504508</td>\n",
       "      <td>0.188475</td>\n",
       "      <td>0.482973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>0.345824</td>\n",
       "      <td>0.318819</td>\n",
       "      <td>0.751824</td>\n",
       "      <td>0.380981</td>\n",
       "      <td>0.191095</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         temp     atemp  Humidity  windspeed     Count\n",
       "576  0.815169  0.766351  0.725633   0.264686  0.827658\n",
       "426  0.442393  0.438975  0.640189   0.255342  0.465255\n",
       "728  0.245101  0.200348  0.498067   0.663106  0.204096\n",
       "482  0.395666  0.391735  0.504508   0.188475  0.482973\n",
       "111  0.345824  0.318819  0.751824   0.380981  0.191095"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# performing scaling on all the numericals variables of train dataset and leaving Count variable aside\n",
    "\n",
    "num_vars = ['temp', 'atemp', 'Humidity', 'windspeed', 'Count']\n",
    "\n",
    "df_train_bike_new[num_vars] = scaler.fit_transform(df_train_bike_new[num_vars])\n",
    "df_train_bike_new[num_vars].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Aug</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Feb</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_June</th>\n",
       "      <th>Month_Mar</th>\n",
       "      <th>Month_May</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Oct</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>weekday_Mon</th>\n",
       "      <th>weekday_Sat</th>\n",
       "      <th>weekday_Sun</th>\n",
       "      <th>weekday_Thurs</th>\n",
       "      <th>weekday_Tues</th>\n",
       "      <th>weekday_Wed</th>\n",
       "      <th>workingday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>510.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.537440</td>\n",
       "      <td>0.513156</td>\n",
       "      <td>0.650480</td>\n",
       "      <td>0.320883</td>\n",
       "      <td>0.513499</td>\n",
       "      <td>0.243137</td>\n",
       "      <td>0.247059</td>\n",
       "      <td>0.247059</td>\n",
       "      <td>0.507843</td>\n",
       "      <td>0.096078</td>\n",
       "      <td>0.084314</td>\n",
       "      <td>0.066667</td>\n",
       "      <td>0.088235</td>\n",
       "      <td>0.076471</td>\n",
       "      <td>0.076471</td>\n",
       "      <td>0.098039</td>\n",
       "      <td>0.084314</td>\n",
       "      <td>0.086275</td>\n",
       "      <td>0.084314</td>\n",
       "      <td>0.080392</td>\n",
       "      <td>0.025490</td>\n",
       "      <td>0.137255</td>\n",
       "      <td>0.147059</td>\n",
       "      <td>0.129412</td>\n",
       "      <td>0.135294</td>\n",
       "      <td>0.154902</td>\n",
       "      <td>0.152941</td>\n",
       "      <td>0.711765</td>\n",
       "      <td>0.625490</td>\n",
       "      <td>0.345098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.225858</td>\n",
       "      <td>0.212410</td>\n",
       "      <td>0.145846</td>\n",
       "      <td>0.169803</td>\n",
       "      <td>0.224421</td>\n",
       "      <td>0.429398</td>\n",
       "      <td>0.431725</td>\n",
       "      <td>0.431725</td>\n",
       "      <td>0.500429</td>\n",
       "      <td>0.294988</td>\n",
       "      <td>0.278131</td>\n",
       "      <td>0.249689</td>\n",
       "      <td>0.283915</td>\n",
       "      <td>0.266010</td>\n",
       "      <td>0.266010</td>\n",
       "      <td>0.297660</td>\n",
       "      <td>0.278131</td>\n",
       "      <td>0.281045</td>\n",
       "      <td>0.278131</td>\n",
       "      <td>0.272166</td>\n",
       "      <td>0.157763</td>\n",
       "      <td>0.344454</td>\n",
       "      <td>0.354512</td>\n",
       "      <td>0.335985</td>\n",
       "      <td>0.342373</td>\n",
       "      <td>0.362166</td>\n",
       "      <td>0.360284</td>\n",
       "      <td>0.453386</td>\n",
       "      <td>0.484471</td>\n",
       "      <td>0.475867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.339853</td>\n",
       "      <td>0.332086</td>\n",
       "      <td>0.538643</td>\n",
       "      <td>0.199179</td>\n",
       "      <td>0.356420</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.542596</td>\n",
       "      <td>0.529718</td>\n",
       "      <td>0.653714</td>\n",
       "      <td>0.296763</td>\n",
       "      <td>0.518638</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.735215</td>\n",
       "      <td>0.688457</td>\n",
       "      <td>0.754830</td>\n",
       "      <td>0.414447</td>\n",
       "      <td>0.684710</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             temp       atemp    Humidity   windspeed       Count  Season_spring  Season_summer  Season_winter   Year_2019   Month_Aug   Month_Dec   Month_Feb   Month_Jan  Month_July  Month_June   Month_Mar   Month_May   Month_Nov   Month_Oct  Month_Sept  holiday_Yes  weekday_Mon  weekday_Sat  weekday_Sun  weekday_Thurs  weekday_Tues  weekday_Wed  workingday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "count  510.000000  510.000000  510.000000  510.000000  510.000000     510.000000     510.000000     510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000  510.000000   510.000000   510.000000   510.000000   510.000000     510.000000    510.000000   510.000000      510.000000          510.000000              510.000000\n",
       "mean     0.537440    0.513156    0.650480    0.320883    0.513499       0.243137       0.247059       0.247059    0.507843    0.096078    0.084314    0.066667    0.088235    0.076471    0.076471    0.098039    0.084314    0.086275    0.084314    0.080392     0.025490     0.137255     0.147059     0.129412       0.135294      0.154902     0.152941        0.711765            0.625490                0.345098\n",
       "std      0.225858    0.212410    0.145846    0.169803    0.224421       0.429398       0.431725       0.431725    0.500429    0.294988    0.278131    0.249689    0.283915    0.266010    0.266010    0.297660    0.278131    0.281045    0.278131    0.272166     0.157763     0.344454     0.354512     0.335985       0.342373      0.362166     0.360284        0.453386            0.484471                0.475867\n",
       "min      0.000000    0.000000    0.000000    0.000000    0.000000       0.000000       0.000000       0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        0.000000            0.000000                0.000000\n",
       "25%      0.339853    0.332086    0.538643    0.199179    0.356420       0.000000       0.000000       0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        0.000000            0.000000                0.000000\n",
       "50%      0.542596    0.529718    0.653714    0.296763    0.518638       0.000000       0.000000       0.000000    1.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        1.000000            1.000000                0.000000\n",
       "75%      0.735215    0.688457    0.754830    0.414447    0.684710       0.000000       0.000000       0.000000    1.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        1.000000            1.000000                1.000000\n",
       "max      1.000000    1.000000    1.000000    1.000000    1.000000       1.000000       1.000000       1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000     1.000000     1.000000     1.000000     1.000000       1.000000      1.000000     1.000000        1.000000            1.000000                1.000000"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking all columns and all the variables after scaling\n",
    "df_train_bike_new.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "**Before start the training process we will plot a heat map to check multicollinearity**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's check the correlation coefficients to see which variables are highly correlated.\n",
    "\n",
    "plt.figure(figsize = [25,20])\n",
    "sns.heatmap(df_train_bike_new.corr(),annot =True, cmap= 'Dark2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**INSIGHT:** - \n",
    "- The heatmap clearly shows which all variable are multicollinear in nature, and which variable have high collinearity with the target variable. \n",
    "- We will refer this map back-and-forth while building the linear model so as to validate different correlated values along with VIF & p-value, for identifying the correct variable to select/eliminate from the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(510,)\n",
      "(510, 29)\n"
     ]
    }
   ],
   "source": [
    "# Dividing training set into X_train and y_train sets for the model building\n",
    "\n",
    "y_train = df_train_bike_new.pop('Count')\n",
    "X_train = df_train_bike_new\n",
    "\n",
    "print(y_train.shape)\n",
    "print(X_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing RFE library for feature selection and after this will perform manual feature selection.\n",
    "\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# using RFE for feature selection and  limiting to selecton to 15 features\n",
    "\n",
    "lm = LinearRegression()\n",
    "lm.fit(X_train, y_train)\n",
    "\n",
    "rfe = RFE(lm, 15)             # running RFE\n",
    "rfe = rfe.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('temp', True, 1),\n",
       " ('atemp', False, 3),\n",
       " ('Humidity', True, 1),\n",
       " ('windspeed', True, 1),\n",
       " ('Season_spring', True, 1),\n",
       " ('Season_summer', True, 1),\n",
       " ('Season_winter', True, 1),\n",
       " ('Year_2019', True, 1),\n",
       " ('Month_Aug', False, 10),\n",
       " ('Month_Dec', True, 1),\n",
       " ('Month_Feb', False, 2),\n",
       " ('Month_Jan', True, 1),\n",
       " ('Month_July', True, 1),\n",
       " ('Month_June', False, 12),\n",
       " ('Month_Mar', False, 15),\n",
       " ('Month_May', False, 9),\n",
       " ('Month_Nov', True, 1),\n",
       " ('Month_Oct', False, 13),\n",
       " ('Month_Sept', True, 1),\n",
       " ('holiday_Yes', True, 1),\n",
       " ('weekday_Mon', False, 6),\n",
       " ('weekday_Sat', False, 14),\n",
       " ('weekday_Sun', False, 5),\n",
       " ('weekday_Thurs', False, 11),\n",
       " ('weekday_Tues', False, 8),\n",
       " ('weekday_Wed', False, 7),\n",
       " ('workingday_Yes', False, 4),\n",
       " ('Weather_Good/Clear', True, 1),\n",
       " ('Weather_Moderate/Misty', True, 1)]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating a list of features selected by RFE\n",
    "\n",
    "list(zip(X_train, rfe.support_, rfe.ranking_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['temp', 'Humidity', 'windspeed', 'Season_spring', 'Season_summer', 'Season_winter', 'Year_2019', 'Month_Dec', 'Month_Jan', 'Month_July', 'Month_Nov', 'Month_Sept', 'holiday_Yes', 'Weather_Good/Clear', 'Weather_Moderate/Misty'], dtype='object')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating a list of features selected by RFE\n",
    "\n",
    "rfe_col = X_train.columns[rfe.support_]\n",
    "rfe_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['atemp', 'Month_Aug', 'Month_Feb', 'Month_June', 'Month_Mar', 'Month_May', 'Month_Oct', 'weekday_Mon', 'weekday_Sat', 'weekday_Sun', 'weekday_Thurs', 'weekday_Tues', 'weekday_Wed', 'workingday_Yes'], dtype='object')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# feature which are chosen by RFE during feature selection( so un-supported columns)\n",
    "\n",
    "X_train.columns[~rfe.support_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>576</th>\n",
       "      <td>0.815169</td>\n",
       "      <td>0.725633</td>\n",
       "      <td>0.264686</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>0.442393</td>\n",
       "      <td>0.640189</td>\n",
       "      <td>0.255342</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>0.245101</td>\n",
       "      <td>0.498067</td>\n",
       "      <td>0.663106</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>482</th>\n",
       "      <td>0.395666</td>\n",
       "      <td>0.504508</td>\n",
       "      <td>0.188475</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>0.345824</td>\n",
       "      <td>0.751824</td>\n",
       "      <td>0.380981</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         temp  Humidity  windspeed  Season_spring  Season_summer  Season_winter  Year_2019  Month_Dec  Month_Jan  Month_July  Month_Nov  Month_Sept  holiday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "576  0.815169  0.725633   0.264686              0              0              0          1          0          0           1          0           0            0                   1                       0\n",
       "426  0.442393  0.640189   0.255342              1              0              0          1          0          0           0          0           0            0                   0                       1\n",
       "728  0.245101  0.498067   0.663106              1              0              0          1          1          0           0          0           0            0                   1                       0\n",
       "482  0.395666  0.504508   0.188475              0              1              0          1          0          0           0          0           0            0                   0                       1\n",
       "111  0.345824  0.751824   0.380981              0              1              0          0          0          0           0          0           0            0                   0                       1"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating new train dataframe with RFE selected features\n",
    "\n",
    "X_train_rfe = X_train[rfe_col]\n",
    "X_train_rfe.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.845</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.840</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   179.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>8.15e-189</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:34</td>     <th>  Log-Likelihood:    </th> <td>  514.19</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -996.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   494</td>      <th>  BIC:               </th> <td>  -928.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    15</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                  <td>    0.0732</td> <td>    0.048</td> <td>    1.540</td> <td> 0.124</td> <td>   -0.020</td> <td>    0.167</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>                   <td>    0.4815</td> <td>    0.037</td> <td>   13.005</td> <td> 0.000</td> <td>    0.409</td> <td>    0.554</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Humidity</th>               <td>   -0.1622</td> <td>    0.038</td> <td>   -4.291</td> <td> 0.000</td> <td>   -0.236</td> <td>   -0.088</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>              <td>   -0.1887</td> <td>    0.026</td> <td>   -7.315</td> <td> 0.000</td> <td>   -0.239</td> <td>   -0.138</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>          <td>   -0.0613</td> <td>    0.021</td> <td>   -2.881</td> <td> 0.004</td> <td>   -0.103</td> <td>   -0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>          <td>    0.0423</td> <td>    0.015</td> <td>    2.761</td> <td> 0.006</td> <td>    0.012</td> <td>    0.072</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>          <td>    0.1019</td> <td>    0.018</td> <td>    5.656</td> <td> 0.000</td> <td>    0.067</td> <td>    0.137</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>              <td>    0.2304</td> <td>    0.008</td> <td>   28.487</td> <td> 0.000</td> <td>    0.215</td> <td>    0.246</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Dec</th>              <td>   -0.0355</td> <td>    0.018</td> <td>   -2.024</td> <td> 0.043</td> <td>   -0.070</td> <td>   -0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Jan</th>              <td>   -0.0434</td> <td>    0.018</td> <td>   -2.393</td> <td> 0.017</td> <td>   -0.079</td> <td>   -0.008</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_July</th>             <td>   -0.0553</td> <td>    0.018</td> <td>   -3.030</td> <td> 0.003</td> <td>   -0.091</td> <td>   -0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Nov</th>              <td>   -0.0387</td> <td>    0.019</td> <td>   -2.057</td> <td> 0.040</td> <td>   -0.076</td> <td>   -0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>             <td>    0.0755</td> <td>    0.017</td> <td>    4.466</td> <td> 0.000</td> <td>    0.042</td> <td>    0.109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>            <td>   -0.0911</td> <td>    0.026</td> <td>   -3.557</td> <td> 0.000</td> <td>   -0.141</td> <td>   -0.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th>     <td>    0.2465</td> <td>    0.026</td> <td>    9.331</td> <td> 0.000</td> <td>    0.195</td> <td>    0.298</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Moderate/Misty</th> <td>    0.1922</td> <td>    0.025</td> <td>    7.687</td> <td> 0.000</td> <td>    0.143</td> <td>    0.241</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>66.656</td> <th>  Durbin-Watson:     </th> <td>   2.025</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 161.040</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.682</td> <th>  Prob(JB):          </th> <td>1.07e-35</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.392</td> <th>  Cond. No.          </th> <td>    26.0</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.845\n",
       "Model:                            OLS   Adj. R-squared:                  0.840\n",
       "Method:                 Least Squares   F-statistic:                     179.4\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          8.15e-189\n",
       "Time:                        22:23:34   Log-Likelihood:                 514.19\n",
       "No. Observations:                 510   AIC:                            -996.4\n",
       "Df Residuals:                     494   BIC:                            -928.6\n",
       "Df Model:                          15                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "const                      0.0732      0.048      1.540      0.124      -0.020       0.167\n",
       "temp                       0.4815      0.037     13.005      0.000       0.409       0.554\n",
       "Humidity                  -0.1622      0.038     -4.291      0.000      -0.236      -0.088\n",
       "windspeed                 -0.1887      0.026     -7.315      0.000      -0.239      -0.138\n",
       "Season_spring             -0.0613      0.021     -2.881      0.004      -0.103      -0.019\n",
       "Season_summer              0.0423      0.015      2.761      0.006       0.012       0.072\n",
       "Season_winter              0.1019      0.018      5.656      0.000       0.067       0.137\n",
       "Year_2019                  0.2304      0.008     28.487      0.000       0.215       0.246\n",
       "Month_Dec                 -0.0355      0.018     -2.024      0.043      -0.070      -0.001\n",
       "Month_Jan                 -0.0434      0.018     -2.393      0.017      -0.079      -0.008\n",
       "Month_July                -0.0553      0.018     -3.030      0.003      -0.091      -0.019\n",
       "Month_Nov                 -0.0387      0.019     -2.057      0.040      -0.076      -0.002\n",
       "Month_Sept                 0.0755      0.017      4.466      0.000       0.042       0.109\n",
       "holiday_Yes               -0.0911      0.026     -3.557      0.000      -0.141      -0.041\n",
       "Weather_Good/Clear         0.2465      0.026      9.331      0.000       0.195       0.298\n",
       "Weather_Moderate/Misty     0.1922      0.025      7.687      0.000       0.143       0.241\n",
       "==============================================================================\n",
       "Omnibus:                       66.656   Durbin-Watson:                   2.025\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              161.040\n",
       "Skew:                          -0.682   Prob(JB):                     1.07e-35\n",
       "Kurtosis:                       5.392   Cond. No.                         26.0\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing statsmodels to add constant/intercept.\n",
    "\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm1 = sm.add_constant(X_train_rfe)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr1 = sm.OLS(y_train, X_train_lm1).fit()\n",
    "\n",
    "lr1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Humidity</td>\n",
       "      <td>26.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>25.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>15.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Weather_Moderate/Misty</td>\n",
       "      <td>9.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>5.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>4.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>3.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Month_Nov</td>\n",
       "      <td>1.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Month_Jan</td>\n",
       "      <td>1.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Month_Dec</td>\n",
       "      <td>1.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Month_July</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Features    VIF\n",
       "1                 Humidity  26.33\n",
       "0                     temp  25.12\n",
       "13      Weather_Good/Clear  15.65\n",
       "14  Weather_Moderate/Misty   9.30\n",
       "3            Season_spring   5.75\n",
       "2                windspeed   4.67\n",
       "5            Season_winter   4.53\n",
       "4            Season_summer   3.30\n",
       "6                Year_2019   2.10\n",
       "10               Month_Nov   1.91\n",
       "8                Month_Jan   1.81\n",
       "7                Month_Dec   1.62\n",
       "9               Month_July   1.60\n",
       "11              Month_Sept   1.43\n",
       "12             holiday_Yes   1.06"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing libraries to check the VIF values of the feature variables.\n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 2\n",
    "\n",
    "\n",
    "- removing feature - Humidity due very high VIF values as all the p-values < 0.05.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.839</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.835</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   184.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>4.75e-186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:34</td>     <th>  Log-Likelihood:    </th> <td>  504.85</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -979.7</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   495</td>      <th>  BIC:               </th> <td>  -916.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    14</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                  <td>   -0.0467</td> <td>    0.039</td> <td>   -1.194</td> <td> 0.233</td> <td>   -0.124</td> <td>    0.030</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>                   <td>    0.4387</td> <td>    0.036</td> <td>   12.093</td> <td> 0.000</td> <td>    0.367</td> <td>    0.510</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>              <td>   -0.1585</td> <td>    0.025</td> <td>   -6.276</td> <td> 0.000</td> <td>   -0.208</td> <td>   -0.109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>          <td>   -0.0713</td> <td>    0.021</td> <td>   -3.314</td> <td> 0.001</td> <td>   -0.113</td> <td>   -0.029</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>          <td>    0.0349</td> <td>    0.015</td> <td>    2.251</td> <td> 0.025</td> <td>    0.004</td> <td>    0.065</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>          <td>    0.0869</td> <td>    0.018</td> <td>    4.831</td> <td> 0.000</td> <td>    0.052</td> <td>    0.122</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>              <td>    0.2345</td> <td>    0.008</td> <td>   28.687</td> <td> 0.000</td> <td>    0.218</td> <td>    0.251</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Dec</th>              <td>   -0.0428</td> <td>    0.018</td> <td>   -2.413</td> <td> 0.016</td> <td>   -0.078</td> <td>   -0.008</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Jan</th>              <td>   -0.0500</td> <td>    0.018</td> <td>   -2.719</td> <td> 0.007</td> <td>   -0.086</td> <td>   -0.014</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_July</th>             <td>   -0.0500</td> <td>    0.019</td> <td>   -2.703</td> <td> 0.007</td> <td>   -0.086</td> <td>   -0.014</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Nov</th>              <td>   -0.0395</td> <td>    0.019</td> <td>   -2.064</td> <td> 0.040</td> <td>   -0.077</td> <td>   -0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>             <td>    0.0687</td> <td>    0.017</td> <td>    4.015</td> <td> 0.000</td> <td>    0.035</td> <td>    0.102</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>            <td>   -0.0918</td> <td>    0.026</td> <td>   -3.522</td> <td> 0.000</td> <td>   -0.143</td> <td>   -0.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th>     <td>    0.2917</td> <td>    0.025</td> <td>   11.840</td> <td> 0.000</td> <td>    0.243</td> <td>    0.340</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Moderate/Misty</th> <td>    0.2117</td> <td>    0.025</td> <td>    8.462</td> <td> 0.000</td> <td>    0.163</td> <td>    0.261</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>69.242</td> <th>  Durbin-Watson:     </th> <td>   2.024</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 171.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.698</td> <th>  Prob(JB):          </th> <td>5.81e-38</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.473</td> <th>  Cond. No.          </th> <td>    21.5</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.839\n",
       "Model:                            OLS   Adj. R-squared:                  0.835\n",
       "Method:                 Least Squares   F-statistic:                     184.5\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          4.75e-186\n",
       "Time:                        22:23:34   Log-Likelihood:                 504.85\n",
       "No. Observations:                 510   AIC:                            -979.7\n",
       "Df Residuals:                     495   BIC:                            -916.2\n",
       "Df Model:                          14                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "const                     -0.0467      0.039     -1.194      0.233      -0.124       0.030\n",
       "temp                       0.4387      0.036     12.093      0.000       0.367       0.510\n",
       "windspeed                 -0.1585      0.025     -6.276      0.000      -0.208      -0.109\n",
       "Season_spring             -0.0713      0.021     -3.314      0.001      -0.113      -0.029\n",
       "Season_summer              0.0349      0.015      2.251      0.025       0.004       0.065\n",
       "Season_winter              0.0869      0.018      4.831      0.000       0.052       0.122\n",
       "Year_2019                  0.2345      0.008     28.687      0.000       0.218       0.251\n",
       "Month_Dec                 -0.0428      0.018     -2.413      0.016      -0.078      -0.008\n",
       "Month_Jan                 -0.0500      0.018     -2.719      0.007      -0.086      -0.014\n",
       "Month_July                -0.0500      0.019     -2.703      0.007      -0.086      -0.014\n",
       "Month_Nov                 -0.0395      0.019     -2.064      0.040      -0.077      -0.002\n",
       "Month_Sept                 0.0687      0.017      4.015      0.000       0.035       0.102\n",
       "holiday_Yes               -0.0918      0.026     -3.522      0.000      -0.143      -0.041\n",
       "Weather_Good/Clear         0.2917      0.025     11.840      0.000       0.243       0.340\n",
       "Weather_Moderate/Misty     0.2117      0.025      8.462      0.000       0.163       0.261\n",
       "==============================================================================\n",
       "Omnibus:                       69.242   Durbin-Watson:                   2.024\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              171.476\n",
       "Skew:                          -0.698   Prob(JB):                     5.81e-38\n",
       "Kurtosis:                       5.473   Cond. No.                         21.5\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe2 = X_train_rfe.drop('Humidity', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm2 = sm.add_constant(X_train_rfe2)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr2 = sm.OLS(y_train, X_train_lm2).fit()\n",
    "\n",
    "lr2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>15.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>14.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Weather_Moderate/Misty</td>\n",
       "      <td>8.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>4.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>3.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Month_Nov</td>\n",
       "      <td>1.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Month_Jan</td>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Month_July</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Month_Dec</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Features    VIF\n",
       "12      Weather_Good/Clear  15.65\n",
       "0                     temp  14.02\n",
       "13  Weather_Moderate/Misty   8.82\n",
       "1                windspeed   4.66\n",
       "2            Season_spring   4.41\n",
       "4            Season_winter   3.36\n",
       "3            Season_summer   2.78\n",
       "5                Year_2019   2.08\n",
       "9                Month_Nov   1.89\n",
       "7                Month_Jan   1.74\n",
       "8               Month_July   1.60\n",
       "6                Month_Dec   1.56\n",
       "10              Month_Sept   1.37\n",
       "11             holiday_Yes   1.06"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe2.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe2.values, i) for i in range(X_train_rfe2.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 3\n",
    "- removing feature - 'Weather_Moderate/Misty' due very high VIF values as all the p-values < 0.05. even temp and Weather_Good/Clear has value way higher VIF but from data dictionary and EDA we get that they play a major role in the demand of bikes. thus we are retaining them as of now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.816</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.811</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   169.1</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>1.01e-172</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:35</td>     <th>  Log-Likelihood:    </th> <td>  470.40</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -912.8</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   496</td>      <th>  BIC:               </th> <td>  -853.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    13</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    0.1442</td> <td>    0.034</td> <td>    4.222</td> <td> 0.000</td> <td>    0.077</td> <td>    0.211</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>               <td>    0.4520</td> <td>    0.039</td> <td>   11.669</td> <td> 0.000</td> <td>    0.376</td> <td>    0.528</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>          <td>   -0.1798</td> <td>    0.027</td> <td>   -6.695</td> <td> 0.000</td> <td>   -0.233</td> <td>   -0.127</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>      <td>   -0.0662</td> <td>    0.023</td> <td>   -2.881</td> <td> 0.004</td> <td>   -0.111</td> <td>   -0.021</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>      <td>    0.0405</td> <td>    0.017</td> <td>    2.447</td> <td> 0.015</td> <td>    0.008</td> <td>    0.073</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>      <td>    0.0776</td> <td>    0.019</td> <td>    4.043</td> <td> 0.000</td> <td>    0.040</td> <td>    0.115</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>          <td>    0.2380</td> <td>    0.009</td> <td>   27.280</td> <td> 0.000</td> <td>    0.221</td> <td>    0.255</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Dec</th>          <td>   -0.0317</td> <td>    0.019</td> <td>   -1.674</td> <td> 0.095</td> <td>   -0.069</td> <td>    0.005</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Jan</th>          <td>   -0.0410</td> <td>    0.020</td> <td>   -2.091</td> <td> 0.037</td> <td>   -0.080</td> <td>   -0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_July</th>         <td>   -0.0554</td> <td>    0.020</td> <td>   -2.802</td> <td> 0.005</td> <td>   -0.094</td> <td>   -0.017</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Nov</th>          <td>   -0.0296</td> <td>    0.020</td> <td>   -1.449</td> <td> 0.148</td> <td>   -0.070</td> <td>    0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>         <td>    0.0667</td> <td>    0.018</td> <td>    3.647</td> <td> 0.000</td> <td>    0.031</td> <td>    0.103</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>        <td>   -0.0874</td> <td>    0.028</td> <td>   -3.139</td> <td> 0.002</td> <td>   -0.142</td> <td>   -0.033</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th> <td>    0.0960</td> <td>    0.009</td> <td>   10.571</td> <td> 0.000</td> <td>    0.078</td> <td>    0.114</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>101.079</td> <th>  Durbin-Watson:     </th> <td>   2.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 326.095</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.908</td>  <th>  Prob(JB):          </th> <td>1.55e-71</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.471</td>  <th>  Cond. No.          </th> <td>    20.1</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.816\n",
       "Model:                            OLS   Adj. R-squared:                  0.811\n",
       "Method:                 Least Squares   F-statistic:                     169.1\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          1.01e-172\n",
       "Time:                        22:23:35   Log-Likelihood:                 470.40\n",
       "No. Observations:                 510   AIC:                            -912.8\n",
       "Df Residuals:                     496   BIC:                            -853.5\n",
       "Df Model:                          13                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  0.1442      0.034      4.222      0.000       0.077       0.211\n",
       "temp                   0.4520      0.039     11.669      0.000       0.376       0.528\n",
       "windspeed             -0.1798      0.027     -6.695      0.000      -0.233      -0.127\n",
       "Season_spring         -0.0662      0.023     -2.881      0.004      -0.111      -0.021\n",
       "Season_summer          0.0405      0.017      2.447      0.015       0.008       0.073\n",
       "Season_winter          0.0776      0.019      4.043      0.000       0.040       0.115\n",
       "Year_2019              0.2380      0.009     27.280      0.000       0.221       0.255\n",
       "Month_Dec             -0.0317      0.019     -1.674      0.095      -0.069       0.005\n",
       "Month_Jan             -0.0410      0.020     -2.091      0.037      -0.080      -0.002\n",
       "Month_July            -0.0554      0.020     -2.802      0.005      -0.094      -0.017\n",
       "Month_Nov             -0.0296      0.020     -1.449      0.148      -0.070       0.011\n",
       "Month_Sept             0.0667      0.018      3.647      0.000       0.031       0.103\n",
       "holiday_Yes           -0.0874      0.028     -3.139      0.002      -0.142      -0.033\n",
       "Weather_Good/Clear     0.0960      0.009     10.571      0.000       0.078       0.114\n",
       "==============================================================================\n",
       "Omnibus:                      101.079   Durbin-Watson:                   2.038\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              326.095\n",
       "Skew:                          -0.908   Prob(JB):                     1.55e-71\n",
       "Kurtosis:                       6.471   Cond. No.                         20.1\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe3 = X_train_rfe2.drop('Weather_Moderate/Misty', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm3 = sm.add_constant(X_train_rfe3)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr3 = sm.OLS(y_train, X_train_lm3).fit()\n",
    "\n",
    "lr3.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>5.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>2.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>2.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Month_Nov</td>\n",
       "      <td>1.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Month_Jan</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Month_July</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Month_Dec</td>\n",
       "      <td>1.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Features   VIF\n",
       "0                 temp  5.85\n",
       "1            windspeed  4.61\n",
       "2        Season_spring  2.96\n",
       "4        Season_winter  2.85\n",
       "12  Weather_Good/Clear  2.73\n",
       "3        Season_summer  2.21\n",
       "5            Year_2019  2.07\n",
       "9            Month_Nov  1.82\n",
       "7            Month_Jan  1.64\n",
       "8           Month_July  1.60\n",
       "6            Month_Dec  1.47\n",
       "10          Month_Sept  1.34\n",
       "11         holiday_Yes  1.06"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe3.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe3.values, i) for i in range(X_train_rfe3.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 4\n",
    "- removing feature - 'Month_Nov' coz high p-values(0.148)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.815</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.811</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   182.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>2.07e-173</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:35</td>     <th>  Log-Likelihood:    </th> <td>  469.32</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -912.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   497</td>      <th>  BIC:               </th> <td>  -857.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    12</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    0.1324</td> <td>    0.033</td> <td>    3.988</td> <td> 0.000</td> <td>    0.067</td> <td>    0.198</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>               <td>    0.4664</td> <td>    0.037</td> <td>   12.446</td> <td> 0.000</td> <td>    0.393</td> <td>    0.540</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>          <td>   -0.1802</td> <td>    0.027</td> <td>   -6.703</td> <td> 0.000</td> <td>   -0.233</td> <td>   -0.127</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>      <td>   -0.0602</td> <td>    0.023</td> <td>   -2.661</td> <td> 0.008</td> <td>   -0.105</td> <td>   -0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>      <td>    0.0446</td> <td>    0.016</td> <td>    2.729</td> <td> 0.007</td> <td>    0.012</td> <td>    0.077</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>      <td>    0.0706</td> <td>    0.019</td> <td>    3.796</td> <td> 0.000</td> <td>    0.034</td> <td>    0.107</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>          <td>    0.2378</td> <td>    0.009</td> <td>   27.233</td> <td> 0.000</td> <td>    0.221</td> <td>    0.255</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Dec</th>          <td>   -0.0209</td> <td>    0.017</td> <td>   -1.199</td> <td> 0.231</td> <td>   -0.055</td> <td>    0.013</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Jan</th>          <td>   -0.0375</td> <td>    0.019</td> <td>   -1.922</td> <td> 0.055</td> <td>   -0.076</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_July</th>         <td>   -0.0552</td> <td>    0.020</td> <td>   -2.790</td> <td> 0.005</td> <td>   -0.094</td> <td>   -0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>         <td>    0.0708</td> <td>    0.018</td> <td>    3.916</td> <td> 0.000</td> <td>    0.035</td> <td>    0.106</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>        <td>   -0.0923</td> <td>    0.028</td> <td>   -3.334</td> <td> 0.001</td> <td>   -0.147</td> <td>   -0.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th> <td>    0.0953</td> <td>    0.009</td> <td>   10.494</td> <td> 0.000</td> <td>    0.077</td> <td>    0.113</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>94.595</td> <th>  Durbin-Watson:     </th> <td>   2.055</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 287.484</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.868</td> <th>  Prob(JB):          </th> <td>3.75e-63</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.242</td> <th>  Cond. No.          </th> <td>    19.4</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.815\n",
       "Model:                            OLS   Adj. R-squared:                  0.811\n",
       "Method:                 Least Squares   F-statistic:                     182.6\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          2.07e-173\n",
       "Time:                        22:23:35   Log-Likelihood:                 469.32\n",
       "No. Observations:                 510   AIC:                            -912.6\n",
       "Df Residuals:                     497   BIC:                            -857.6\n",
       "Df Model:                          12                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  0.1324      0.033      3.988      0.000       0.067       0.198\n",
       "temp                   0.4664      0.037     12.446      0.000       0.393       0.540\n",
       "windspeed             -0.1802      0.027     -6.703      0.000      -0.233      -0.127\n",
       "Season_spring         -0.0602      0.023     -2.661      0.008      -0.105      -0.016\n",
       "Season_summer          0.0446      0.016      2.729      0.007       0.012       0.077\n",
       "Season_winter          0.0706      0.019      3.796      0.000       0.034       0.107\n",
       "Year_2019              0.2378      0.009     27.233      0.000       0.221       0.255\n",
       "Month_Dec             -0.0209      0.017     -1.199      0.231      -0.055       0.013\n",
       "Month_Jan             -0.0375      0.019     -1.922      0.055      -0.076       0.001\n",
       "Month_July            -0.0552      0.020     -2.790      0.005      -0.094      -0.016\n",
       "Month_Sept             0.0708      0.018      3.916      0.000       0.035       0.106\n",
       "holiday_Yes           -0.0923      0.028     -3.334      0.001      -0.147      -0.038\n",
       "Weather_Good/Clear     0.0953      0.009     10.494      0.000       0.077       0.113\n",
       "==============================================================================\n",
       "Omnibus:                       94.595   Durbin-Watson:                   2.055\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              287.484\n",
       "Skew:                          -0.868   Prob(JB):                     3.75e-63\n",
       "Kurtosis:                       6.242   Cond. No.                         19.4\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe4 = X_train_rfe3.drop('Month_Nov', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm4 = sm.add_constant(X_train_rfe4)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr4 = sm.OLS(y_train, X_train_lm4).fit()\n",
    "\n",
    "lr4.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>5.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>2.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Month_Jan</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Month_July</td>\n",
       "      <td>1.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Month_Dec</td>\n",
       "      <td>1.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Features   VIF\n",
       "0                 temp  5.79\n",
       "1            windspeed  4.57\n",
       "2        Season_spring  2.96\n",
       "11  Weather_Good/Clear  2.71\n",
       "3        Season_summer  2.21\n",
       "5            Year_2019  2.07\n",
       "4        Season_winter  2.00\n",
       "7            Month_Jan  1.64\n",
       "8           Month_July  1.59\n",
       "9           Month_Sept  1.33\n",
       "6            Month_Dec  1.29\n",
       "10         holiday_Yes  1.04"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe4.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe4.values, i) for i in range(X_train_rfe4.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 5\n",
    "\n",
    "- removing feature - 'Month_Dec' coz of high p-values(0.231)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.815</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.810</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   198.9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>2.93e-174</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:35</td>     <th>  Log-Likelihood:    </th> <td>  468.59</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -913.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   498</td>      <th>  BIC:               </th> <td>  -862.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    11</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    0.1230</td> <td>    0.032</td> <td>    3.811</td> <td> 0.000</td> <td>    0.060</td> <td>    0.186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>               <td>    0.4767</td> <td>    0.036</td> <td>   13.062</td> <td> 0.000</td> <td>    0.405</td> <td>    0.548</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>          <td>   -0.1767</td> <td>    0.027</td> <td>   -6.610</td> <td> 0.000</td> <td>   -0.229</td> <td>   -0.124</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>      <td>   -0.0591</td> <td>    0.023</td> <td>   -2.614</td> <td> 0.009</td> <td>   -0.104</td> <td>   -0.015</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>      <td>    0.0468</td> <td>    0.016</td> <td>    2.880</td> <td> 0.004</td> <td>    0.015</td> <td>    0.079</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>      <td>    0.0693</td> <td>    0.019</td> <td>    3.733</td> <td> 0.000</td> <td>    0.033</td> <td>    0.106</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>          <td>    0.2378</td> <td>    0.009</td> <td>   27.218</td> <td> 0.000</td> <td>    0.221</td> <td>    0.255</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Jan</th>          <td>   -0.0324</td> <td>    0.019</td> <td>   -1.704</td> <td> 0.089</td> <td>   -0.070</td> <td>    0.005</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_July</th>         <td>   -0.0555</td> <td>    0.020</td> <td>   -2.804</td> <td> 0.005</td> <td>   -0.094</td> <td>   -0.017</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>         <td>    0.0725</td> <td>    0.018</td> <td>    4.018</td> <td> 0.000</td> <td>    0.037</td> <td>    0.108</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>        <td>   -0.0913</td> <td>    0.028</td> <td>   -3.298</td> <td> 0.001</td> <td>   -0.146</td> <td>   -0.037</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th> <td>    0.0951</td> <td>    0.009</td> <td>   10.472</td> <td> 0.000</td> <td>    0.077</td> <td>    0.113</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>92.324</td> <th>  Durbin-Watson:     </th> <td>   2.061</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 275.195</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.854</td> <th>  Prob(JB):          </th> <td>1.75e-60</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.168</td> <th>  Cond. No.          </th> <td>    19.0</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.815\n",
       "Model:                            OLS   Adj. R-squared:                  0.810\n",
       "Method:                 Least Squares   F-statistic:                     198.9\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          2.93e-174\n",
       "Time:                        22:23:35   Log-Likelihood:                 468.59\n",
       "No. Observations:                 510   AIC:                            -913.2\n",
       "Df Residuals:                     498   BIC:                            -862.4\n",
       "Df Model:                          11                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  0.1230      0.032      3.811      0.000       0.060       0.186\n",
       "temp                   0.4767      0.036     13.062      0.000       0.405       0.548\n",
       "windspeed             -0.1767      0.027     -6.610      0.000      -0.229      -0.124\n",
       "Season_spring         -0.0591      0.023     -2.614      0.009      -0.104      -0.015\n",
       "Season_summer          0.0468      0.016      2.880      0.004       0.015       0.079\n",
       "Season_winter          0.0693      0.019      3.733      0.000       0.033       0.106\n",
       "Year_2019              0.2378      0.009     27.218      0.000       0.221       0.255\n",
       "Month_Jan             -0.0324      0.019     -1.704      0.089      -0.070       0.005\n",
       "Month_July            -0.0555      0.020     -2.804      0.005      -0.094      -0.017\n",
       "Month_Sept             0.0725      0.018      4.018      0.000       0.037       0.108\n",
       "holiday_Yes           -0.0913      0.028     -3.298      0.001      -0.146      -0.037\n",
       "Weather_Good/Clear     0.0951      0.009     10.472      0.000       0.077       0.113\n",
       "==============================================================================\n",
       "Omnibus:                       92.324   Durbin-Watson:                   2.061\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              275.195\n",
       "Skew:                          -0.854   Prob(JB):                     1.75e-60\n",
       "Kurtosis:                       6.168   Cond. No.                         19.0\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe5 = X_train_rfe4.drop('Month_Dec', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm5 = sm.add_constant(X_train_rfe5)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr5 = sm.OLS(y_train, X_train_lm5).fit()\n",
    "\n",
    "lr5.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>5.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>2.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Month_Jan</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Month_July</td>\n",
       "      <td>1.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Features   VIF\n",
       "0                 temp  5.78\n",
       "1            windspeed  4.57\n",
       "2        Season_spring  2.84\n",
       "10  Weather_Good/Clear  2.71\n",
       "3        Season_summer  2.21\n",
       "5            Year_2019  2.07\n",
       "4        Season_winter  1.74\n",
       "6            Month_Jan  1.60\n",
       "7           Month_July  1.59\n",
       "8           Month_Sept  1.33\n",
       "9          holiday_Yes  1.04"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe5.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe5.values, i) for i in range(X_train_rfe5.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 6\n",
    "\n",
    "- removing feature - 'Month_Jan' coz of high p-values(0.089)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.813</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.810</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   217.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>8.19e-175</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:35</td>     <th>  Log-Likelihood:    </th> <td>  467.10</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -912.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   499</td>      <th>  BIC:               </th> <td>  -865.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    10</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    0.1088</td> <td>    0.031</td> <td>    3.483</td> <td> 0.001</td> <td>    0.047</td> <td>    0.170</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>               <td>    0.4927</td> <td>    0.035</td> <td>   13.944</td> <td> 0.000</td> <td>    0.423</td> <td>    0.562</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>          <td>   -0.1706</td> <td>    0.027</td> <td>   -6.427</td> <td> 0.000</td> <td>   -0.223</td> <td>   -0.118</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>      <td>   -0.0638</td> <td>    0.022</td> <td>   -2.836</td> <td> 0.005</td> <td>   -0.108</td> <td>   -0.020</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>      <td>    0.0494</td> <td>    0.016</td> <td>    3.048</td> <td> 0.002</td> <td>    0.018</td> <td>    0.081</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>      <td>    0.0745</td> <td>    0.018</td> <td>    4.063</td> <td> 0.000</td> <td>    0.038</td> <td>    0.111</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>          <td>    0.2372</td> <td>    0.009</td> <td>   27.118</td> <td> 0.000</td> <td>    0.220</td> <td>    0.254</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_July</th>         <td>   -0.0569</td> <td>    0.020</td> <td>   -2.872</td> <td> 0.004</td> <td>   -0.096</td> <td>   -0.018</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>         <td>    0.0729</td> <td>    0.018</td> <td>    4.033</td> <td> 0.000</td> <td>    0.037</td> <td>    0.108</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>        <td>   -0.0919</td> <td>    0.028</td> <td>   -3.315</td> <td> 0.001</td> <td>   -0.146</td> <td>   -0.037</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th> <td>    0.0957</td> <td>    0.009</td> <td>   10.529</td> <td> 0.000</td> <td>    0.078</td> <td>    0.114</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>91.943</td> <th>  Durbin-Watson:     </th> <td>   2.056</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 274.468</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.850</td> <th>  Prob(JB):          </th> <td>2.51e-60</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.166</td> <th>  Cond. No.          </th> <td>    18.5</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.813\n",
       "Model:                            OLS   Adj. R-squared:                  0.810\n",
       "Method:                 Least Squares   F-statistic:                     217.6\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          8.19e-175\n",
       "Time:                        22:23:35   Log-Likelihood:                 467.10\n",
       "No. Observations:                 510   AIC:                            -912.2\n",
       "Df Residuals:                     499   BIC:                            -865.6\n",
       "Df Model:                          10                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  0.1088      0.031      3.483      0.001       0.047       0.170\n",
       "temp                   0.4927      0.035     13.944      0.000       0.423       0.562\n",
       "windspeed             -0.1706      0.027     -6.427      0.000      -0.223      -0.118\n",
       "Season_spring         -0.0638      0.022     -2.836      0.005      -0.108      -0.020\n",
       "Season_summer          0.0494      0.016      3.048      0.002       0.018       0.081\n",
       "Season_winter          0.0745      0.018      4.063      0.000       0.038       0.111\n",
       "Year_2019              0.2372      0.009     27.118      0.000       0.220       0.254\n",
       "Month_July            -0.0569      0.020     -2.872      0.004      -0.096      -0.018\n",
       "Month_Sept             0.0729      0.018      4.033      0.000       0.037       0.108\n",
       "holiday_Yes           -0.0919      0.028     -3.315      0.001      -0.146      -0.037\n",
       "Weather_Good/Clear     0.0957      0.009     10.529      0.000       0.078       0.114\n",
       "==============================================================================\n",
       "Omnibus:                       91.943   Durbin-Watson:                   2.056\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              274.468\n",
       "Skew:                          -0.850   Prob(JB):                     2.51e-60\n",
       "Kurtosis:                       6.166   Cond. No.                         18.5\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe6 = X_train_rfe5.drop('Month_Jan', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm6 = sm.add_constant(X_train_rfe6)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr6 = sm.OLS(y_train, X_train_lm6).fit()\n",
    "\n",
    "lr6.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>5.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>2.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>2.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Month_July</td>\n",
       "      <td>1.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Features   VIF\n",
       "0                temp  5.75\n",
       "1           windspeed  4.55\n",
       "9  Weather_Good/Clear  2.71\n",
       "3       Season_summer  2.19\n",
       "2       Season_spring  2.12\n",
       "5           Year_2019  2.06\n",
       "4       Season_winter  1.74\n",
       "6          Month_July  1.59\n",
       "7          Month_Sept  1.32\n",
       "8         holiday_Yes  1.04"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe6.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe6.values, i) for i in range(X_train_rfe6.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 7\n",
    "- removing feature - 'Month_July' coz of high collinearity with temp variable.\n",
    "- even hum and temp VIF values are high but from data dictionary we get that it plays a major role of humidity and temperature, thus we will retain them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.810</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.807</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   237.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>3.04e-174</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:36</td>     <th>  Log-Likelihood:    </th> <td>  462.92</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -905.8</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   500</td>      <th>  BIC:               </th> <td>  -863.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     9</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    0.1009</td> <td>    0.031</td> <td>    3.218</td> <td> 0.001</td> <td>    0.039</td> <td>    0.162</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>               <td>    0.4782</td> <td>    0.035</td> <td>   13.576</td> <td> 0.000</td> <td>    0.409</td> <td>    0.547</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>          <td>   -0.1711</td> <td>    0.027</td> <td>   -6.398</td> <td> 0.000</td> <td>   -0.224</td> <td>   -0.119</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_spring</th>      <td>   -0.0509</td> <td>    0.022</td> <td>   -2.292</td> <td> 0.022</td> <td>   -0.094</td> <td>   -0.007</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>      <td>    0.0665</td> <td>    0.015</td> <td>    4.382</td> <td> 0.000</td> <td>    0.037</td> <td>    0.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>      <td>    0.0884</td> <td>    0.018</td> <td>    4.958</td> <td> 0.000</td> <td>    0.053</td> <td>    0.123</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>          <td>    0.2378</td> <td>    0.009</td> <td>   27.008</td> <td> 0.000</td> <td>    0.221</td> <td>    0.255</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>         <td>    0.0884</td> <td>    0.017</td> <td>    5.083</td> <td> 0.000</td> <td>    0.054</td> <td>    0.123</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>        <td>   -0.0906</td> <td>    0.028</td> <td>   -3.245</td> <td> 0.001</td> <td>   -0.145</td> <td>   -0.036</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th> <td>    0.0944</td> <td>    0.009</td> <td>   10.318</td> <td> 0.000</td> <td>    0.076</td> <td>    0.112</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>94.652</td> <th>  Durbin-Watson:     </th> <td>   2.094</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 276.230</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.883</td> <th>  Prob(JB):          </th> <td>1.04e-60</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.144</td> <th>  Cond. No.          </th> <td>    18.4</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.810\n",
       "Model:                            OLS   Adj. R-squared:                  0.807\n",
       "Method:                 Least Squares   F-statistic:                     237.5\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          3.04e-174\n",
       "Time:                        22:23:36   Log-Likelihood:                 462.92\n",
       "No. Observations:                 510   AIC:                            -905.8\n",
       "Df Residuals:                     500   BIC:                            -863.5\n",
       "Df Model:                           9                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  0.1009      0.031      3.218      0.001       0.039       0.162\n",
       "temp                   0.4782      0.035     13.576      0.000       0.409       0.547\n",
       "windspeed             -0.1711      0.027     -6.398      0.000      -0.224      -0.119\n",
       "Season_spring         -0.0509      0.022     -2.292      0.022      -0.094      -0.007\n",
       "Season_summer          0.0665      0.015      4.382      0.000       0.037       0.096\n",
       "Season_winter          0.0884      0.018      4.958      0.000       0.053       0.123\n",
       "Year_2019              0.2378      0.009     27.008      0.000       0.221       0.255\n",
       "Month_Sept             0.0884      0.017      5.083      0.000       0.054       0.123\n",
       "holiday_Yes           -0.0906      0.028     -3.245      0.001      -0.145      -0.036\n",
       "Weather_Good/Clear     0.0944      0.009     10.318      0.000       0.076       0.112\n",
       "==============================================================================\n",
       "Omnibus:                       94.652   Durbin-Watson:                   2.094\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              276.230\n",
       "Skew:                          -0.883   Prob(JB):                     1.04e-60\n",
       "Kurtosis:                       6.144   Cond. No.                         18.4\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe7 = X_train_rfe6.drop('Month_July', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm7 = sm.add_constant(X_train_rfe7)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr7 = sm.OLS(y_train, X_train_lm7).fit()\n",
    "\n",
    "lr7.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>4.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>4.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>2.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_spring</td>\n",
       "      <td>2.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>1.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>1.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Features   VIF\n",
       "0                temp  4.66\n",
       "1           windspeed  4.54\n",
       "8  Weather_Good/Clear  2.70\n",
       "5           Year_2019  2.06\n",
       "2       Season_spring  2.02\n",
       "3       Season_summer  1.85\n",
       "4       Season_winter  1.57\n",
       "6          Month_Sept  1.22\n",
       "7         holiday_Yes  1.04"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe7.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe7.values, i) for i in range(X_train_rfe7.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "### Model 8\n",
    "- removing feature - 'Season_spring' coz of high negative collinearity with temp variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>Count</td>      <th>  R-squared:         </th> <td>   0.808</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.805</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   264.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 10 May 2021</td> <th>  Prob (F-statistic):</th> <td>2.45e-174</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:23:36</td>     <th>  Log-Likelihood:    </th> <td>  460.26</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   510</td>      <th>  AIC:               </th> <td>  -902.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   501</td>      <th>  BIC:               </th> <td>  -864.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     8</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    0.0417</td> <td>    0.018</td> <td>    2.337</td> <td> 0.020</td> <td>    0.007</td> <td>    0.077</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>temp</th>               <td>    0.5428</td> <td>    0.021</td> <td>   25.540</td> <td> 0.000</td> <td>    0.501</td> <td>    0.585</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>windspeed</th>          <td>   -0.1756</td> <td>    0.027</td> <td>   -6.559</td> <td> 0.000</td> <td>   -0.228</td> <td>   -0.123</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_summer</th>      <td>    0.0903</td> <td>    0.011</td> <td>    8.152</td> <td> 0.000</td> <td>    0.069</td> <td>    0.112</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Season_winter</th>      <td>    0.1205</td> <td>    0.011</td> <td>   10.863</td> <td> 0.000</td> <td>    0.099</td> <td>    0.142</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year_2019</th>          <td>    0.2366</td> <td>    0.009</td> <td>   26.806</td> <td> 0.000</td> <td>    0.219</td> <td>    0.254</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month_Sept</th>         <td>    0.0978</td> <td>    0.017</td> <td>    5.761</td> <td> 0.000</td> <td>    0.064</td> <td>    0.131</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>holiday_Yes</th>        <td>   -0.0928</td> <td>    0.028</td> <td>   -3.312</td> <td> 0.001</td> <td>   -0.148</td> <td>   -0.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Weather_Good/Clear</th> <td>    0.0939</td> <td>    0.009</td> <td>   10.226</td> <td> 0.000</td> <td>    0.076</td> <td>    0.112</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>88.063</td> <th>  Durbin-Watson:     </th> <td>   2.102</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 234.486</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.853</td> <th>  Prob(JB):          </th> <td>1.21e-51</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.851</td> <th>  Cond. No.          </th> <td>    10.8</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  Count   R-squared:                       0.808\n",
       "Model:                            OLS   Adj. R-squared:                  0.805\n",
       "Method:                 Least Squares   F-statistic:                     264.2\n",
       "Date:                Mon, 10 May 2021   Prob (F-statistic):          2.45e-174\n",
       "Time:                        22:23:36   Log-Likelihood:                 460.26\n",
       "No. Observations:                 510   AIC:                            -902.5\n",
       "Df Residuals:                     501   BIC:                            -864.4\n",
       "Df Model:                           8                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  0.0417      0.018      2.337      0.020       0.007       0.077\n",
       "temp                   0.5428      0.021     25.540      0.000       0.501       0.585\n",
       "windspeed             -0.1756      0.027     -6.559      0.000      -0.228      -0.123\n",
       "Season_summer          0.0903      0.011      8.152      0.000       0.069       0.112\n",
       "Season_winter          0.1205      0.011     10.863      0.000       0.099       0.142\n",
       "Year_2019              0.2366      0.009     26.806      0.000       0.219       0.254\n",
       "Month_Sept             0.0978      0.017      5.761      0.000       0.064       0.131\n",
       "holiday_Yes           -0.0928      0.028     -3.312      0.001      -0.148      -0.038\n",
       "Weather_Good/Clear     0.0939      0.009     10.226      0.000       0.076       0.112\n",
       "==============================================================================\n",
       "Omnibus:                       88.063   Durbin-Watson:                   2.102\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              234.486\n",
       "Skew:                          -0.853   Prob(JB):                     1.21e-51\n",
       "Kurtosis:                       5.851   Cond. No.                         10.8\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_rfe8 = X_train_rfe7.drop('Season_spring', axis = 1)\n",
    "\n",
    "# Add a constant\n",
    "X_train_lm8 = sm.add_constant(X_train_rfe8)\n",
    "\n",
    "# Create a first fitted model\n",
    "lr8 = sm.OLS(y_train, X_train_lm8).fit()\n",
    "\n",
    "lr8.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>temp</td>\n",
       "      <td>4.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>windspeed</td>\n",
       "      <td>3.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Weather_Good/Clear</td>\n",
       "      <td>2.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Year_2019</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Season_summer</td>\n",
       "      <td>1.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Season_winter</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Month_Sept</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>holiday_Yes</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Features   VIF\n",
       "0                temp  4.35\n",
       "1           windspeed  3.08\n",
       "7  Weather_Good/Clear  2.55\n",
       "4           Year_2019  2.00\n",
       "2       Season_summer  1.55\n",
       "3       Season_winter  1.33\n",
       "5          Month_Sept  1.20\n",
       "6         holiday_Yes  1.04"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for the VIF values of the feature variables. \n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train_rfe8.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train_rfe8.values, i) for i in range(X_train_rfe8.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "**This model looks good, as there seems to be VERY LOW Multicollinearity between the predictors and the p-values for all the predictors seems to be significant. For now, we will consider this as our final model (unless the Test data metrics are not significantly close to this number).**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Final Model Interpretation\n",
    "- **Hypothesis Testing:**\n",
    "    - Hypothesis testing states that:\n",
    "        - H0:B1=B2=...=Bn=0 \n",
    "        - H1:  at least one  Bi!=0 \n",
    "        \n",
    "\n",
    "**Model 8  coefficient values**\n",
    "\n",
    "- const\t       \t=\t\t0.0417\t\n",
    "- temp\t      \t=\t\t0.5428\t\n",
    "- windspeed\t  \t=\t\t-0.1756\t\n",
    "- Season_summer\t=\t\t0.0903\t\n",
    "- Season_winter\t=\t\t0.1205\t\n",
    "- Year_2019\t\t=\t\t0.2366\t\n",
    "- Month_Sept\t\t=\t\t0.0978\t\n",
    "- holiday_Yes\t\t=\t\t-0.0928\t\n",
    "- Weather_Good/Clear\t=\t0.0939\t\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**INSIGHT:  From the Model 8 model summary, it is evident that all our coefficients are not equal to zero. which means We REJECT the NULL HYPOTHESIS**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**F Statistics** : F-Statistics is used for testing the overall significance of the Model: Higher the F-Statistics, more significant the Model is.\n",
    "\n",
    "- F-statistic: 264.2\n",
    "- Prob (F-statistic): 2.45e-174\n",
    "\n",
    "**The F-Statistics value of 264.2 (which is greater than 1) and the p-value of '~0.0000' states that the overall model is significant**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The equation for best fitted line based on Model 8:\n",
    "\n",
    "\n",
    "$Count = 0.0417 + (temp * 0.5428) - (windspeed * 0.1756) + (Season summer * 0.0903) + (Season winter * 0.1205) + (Year 2019 * 0.2366) + (Month Sept * 0.0978) - (holiday Yes * 0.0928) + (Weather Good/Clear * 0.0939)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interpretation of Coefficients:\n",
    "\n",
    "- **const**: The Constant value of â€˜0.0417â€™ indicated that, in the absence of all other predictor variables (i.e. when x1,x2...xn =0), The bike demand still increases by 0.0417 units.\n",
    "\n",
    "- **ð‘¡ð‘’ð‘šð‘**: A coefficient value of â€˜0.5428â€™ indicate a unit increase in temp variable, increases the bike demand by 0.5428 units.\n",
    "\n",
    "- **ð‘¤ð‘–ð‘›ð‘‘ð‘ ð‘ð‘’ð‘’ð‘‘**: A coefficient value of â€˜-0.1756â€™ indicate a unit decrease in windspeed variable, decreases bike demand by 0.1756 units.\n",
    "\n",
    "- **ð‘†ð‘’ð‘Žð‘ ð‘œð‘›_ð‘ ð‘¢ð‘šð‘šð‘’ð‘Ÿ**: A coefficient value of â€˜0.0903â€™ indicate a unit increase in Season_summer variable, increases bike demand by 0.0903 units.\n",
    "\n",
    "- **ð‘†ð‘’ð‘Žð‘ ð‘œð‘›_ð‘¤ð‘–ð‘›ð‘¡ð‘’ð‘Ÿ**: A coefficient value of â€˜0.1205â€™ indicate a unit increase in Season_winter variable, increases bike demand by 0.1205 units.\n",
    "\n",
    "- **ð‘Œð‘’ð‘Žð‘Ÿ_2019**: A coefficient value of â€˜0.2366â€™ indicate a unit increase in Year_2019 variable, increases the bike demand by 0.2366 units.\n",
    "\n",
    "- **ð‘€ð‘œð‘›ð‘¡â„Ž_ð‘†ð‘’ð‘ð‘¡**: A coefficient value of â€˜0.0978â€™ indicate a unit increase in Month_Sept variable, increases the bike demand by 0.0978 units.\n",
    "\n",
    "- **â„Žð‘œð‘™ð‘–ð‘‘ð‘Žð‘¦_ð‘Œð‘’ð‘ **: A coefficient value of â€˜-0.0928â€™ indicate a unit decrease in holiday_Yes variable, decreases bike demand by 0.0928 units.\n",
    "\n",
    "- **ð‘Šð‘’ð‘Žð‘¡â„Žð‘’ð‘Ÿ_ðºð‘œð‘œð‘‘/ð¶ð‘™ð‘’ð‘Žð‘Ÿ**: A coefficient value of â€˜0.0939â€™ indicate a unit increase if the weather is good, increases the bike demand by 0.0939 units."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## VALIDATE ASSUMPTIONS\n",
    "### Error terms are normally distributed with mean zero (not X, Y)\n",
    "### Residual Analysis Of Training Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_pred = lr8.predict(X_train_lm8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# residual calculations\n",
    "res = y_train - y_train_pred\n",
    "\n",
    "# Plot the histogram of the error terms\n",
    "\n",
    "fig = plt.figure(figsize=[7,5])\n",
    "sns.distplot((res), bins = 20)\n",
    "fig.suptitle('Error Terms', fontsize = 20)        # Plot heading \n",
    "plt.xlabel('Errors', fontsize = 18)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**INSIGHT:** - From the above histogram, we could see that the Residuals are normally distributed. Hence our assumption for Linear Regression is valid."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check for Homoscedasticity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check for Homoscedasticity\n",
    "plt.figure(figsize = [8,5])\n",
    "p = sns.scatterplot(y_train_pred,res)\n",
    "plt.xlabel('y_pred/predicted values')\n",
    "plt.ylabel('Residuals')\n",
    "\n",
    "p = sns.lineplot([0,1],[0,0],color='red')\n",
    "p = plt.title('Residuals vs fitted values plot for homoscedasticity check', fontsize = 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**INSIGHT:** - From the above plot, we can see that residuals have equal or almost equal variance across the regression line."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MAKING PREDICTION USING FINAL MODEL\n",
    "Now that we have fitted the model and checked the assumptions, it's time to go ahead and make predictions using the final model (Model 8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Applying the scaling on the test sets**\n",
    "- We will only use **scaler.transform**, as we want to use the metrics that model learned from the training data to be applied on the test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Aug</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Feb</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_June</th>\n",
       "      <th>Month_Mar</th>\n",
       "      <th>Month_May</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Oct</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>weekday_Mon</th>\n",
       "      <th>weekday_Sat</th>\n",
       "      <th>weekday_Sun</th>\n",
       "      <th>weekday_Thurs</th>\n",
       "      <th>weekday_Tues</th>\n",
       "      <th>weekday_Wed</th>\n",
       "      <th>workingday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>0.831783</td>\n",
       "      <td>0.769660</td>\n",
       "      <td>0.657364</td>\n",
       "      <td>0.084219</td>\n",
       "      <td>0.692706</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>0.901354</td>\n",
       "      <td>0.842587</td>\n",
       "      <td>0.610133</td>\n",
       "      <td>0.153728</td>\n",
       "      <td>0.712034</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>0.511964</td>\n",
       "      <td>0.496145</td>\n",
       "      <td>0.837699</td>\n",
       "      <td>0.334206</td>\n",
       "      <td>0.303382</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>0.881625</td>\n",
       "      <td>0.795343</td>\n",
       "      <td>0.437098</td>\n",
       "      <td>0.339570</td>\n",
       "      <td>0.547400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>0.817246</td>\n",
       "      <td>0.741471</td>\n",
       "      <td>0.314298</td>\n",
       "      <td>0.537414</td>\n",
       "      <td>0.569029</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         temp     atemp  Humidity  windspeed     Count  Season_spring  Season_summer  Season_winter  Year_2019  Month_Aug  Month_Dec  Month_Feb  Month_Jan  Month_July  Month_June  Month_Mar  Month_May  Month_Nov  Month_Oct  Month_Sept  holiday_Yes  weekday_Mon  weekday_Sat  weekday_Sun  weekday_Thurs  weekday_Tues  weekday_Wed  workingday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "184  0.831783  0.769660  0.657364   0.084219  0.692706              0              0              0          0          0          0          0          0           1           0          0          0          0          0           0            1            0            0            0              1             0            0               0                   0                       1\n",
       "535  0.901354  0.842587  0.610133   0.153728  0.712034              0              1              0          1          0          0          0          0           0           1          0          0          0          0           0            0            0            0            0              0             0            0               1                   1                       0\n",
       "299  0.511964  0.496145  0.837699   0.334206  0.303382              0              0              1          0          0          0          0          0           0           0          0          0          0          1           0            0            0            0            1              0             0            0               0                   0                       1\n",
       "221  0.881625  0.795343  0.437098   0.339570  0.547400              0              0              0          0          1          0          0          0           0           0          0          0          0          0           0            0            0            1            0              0             0            0               1                   1                       0\n",
       "152  0.817246  0.741471  0.314298   0.537414  0.569029              0              1              0          0          0          0          0          0           0           1          0          0          0          0           0            0            0            0            1              0             0            0               0                   1                       0"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply scaler() to all numeric variables in test dataset. \n",
    "\n",
    "df_test_bike_new[num_vars] = scaler.transform(df_test_bike_new[num_vars])\n",
    "df_test_bike_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Count</th>\n",
       "      <th>Season_spring</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Aug</th>\n",
       "      <th>Month_Dec</th>\n",
       "      <th>Month_Feb</th>\n",
       "      <th>Month_Jan</th>\n",
       "      <th>Month_July</th>\n",
       "      <th>Month_June</th>\n",
       "      <th>Month_Mar</th>\n",
       "      <th>Month_May</th>\n",
       "      <th>Month_Nov</th>\n",
       "      <th>Month_Oct</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>weekday_Mon</th>\n",
       "      <th>weekday_Sat</th>\n",
       "      <th>weekday_Sun</th>\n",
       "      <th>weekday_Thurs</th>\n",
       "      <th>weekday_Tues</th>\n",
       "      <th>weekday_Wed</th>\n",
       "      <th>workingday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "      <th>Weather_Moderate/Misty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.558718</td>\n",
       "      <td>0.532847</td>\n",
       "      <td>0.638221</td>\n",
       "      <td>0.313293</td>\n",
       "      <td>0.522154</td>\n",
       "      <td>0.254545</td>\n",
       "      <td>0.263636</td>\n",
       "      <td>0.236364</td>\n",
       "      <td>0.481818</td>\n",
       "      <td>0.059091</td>\n",
       "      <td>0.086364</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.077273</td>\n",
       "      <td>0.104545</td>\n",
       "      <td>0.095455</td>\n",
       "      <td>0.054545</td>\n",
       "      <td>0.086364</td>\n",
       "      <td>0.072727</td>\n",
       "      <td>0.086364</td>\n",
       "      <td>0.086364</td>\n",
       "      <td>0.036364</td>\n",
       "      <td>0.154545</td>\n",
       "      <td>0.131818</td>\n",
       "      <td>0.172727</td>\n",
       "      <td>0.159091</td>\n",
       "      <td>0.118182</td>\n",
       "      <td>0.122727</td>\n",
       "      <td>0.640909</td>\n",
       "      <td>0.654545</td>\n",
       "      <td>0.318182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.233187</td>\n",
       "      <td>0.217401</td>\n",
       "      <td>0.148694</td>\n",
       "      <td>0.159584</td>\n",
       "      <td>0.219163</td>\n",
       "      <td>0.436599</td>\n",
       "      <td>0.441609</td>\n",
       "      <td>0.425817</td>\n",
       "      <td>0.500809</td>\n",
       "      <td>0.236333</td>\n",
       "      <td>0.281541</td>\n",
       "      <td>0.300684</td>\n",
       "      <td>0.267633</td>\n",
       "      <td>0.306665</td>\n",
       "      <td>0.294512</td>\n",
       "      <td>0.227609</td>\n",
       "      <td>0.281541</td>\n",
       "      <td>0.260281</td>\n",
       "      <td>0.281541</td>\n",
       "      <td>0.281541</td>\n",
       "      <td>0.187620</td>\n",
       "      <td>0.362295</td>\n",
       "      <td>0.339064</td>\n",
       "      <td>0.378873</td>\n",
       "      <td>0.366595</td>\n",
       "      <td>0.323559</td>\n",
       "      <td>0.328872</td>\n",
       "      <td>0.480828</td>\n",
       "      <td>0.476601</td>\n",
       "      <td>0.466833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.046591</td>\n",
       "      <td>0.025950</td>\n",
       "      <td>0.261915</td>\n",
       "      <td>-0.042808</td>\n",
       "      <td>0.048205</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.355429</td>\n",
       "      <td>0.344870</td>\n",
       "      <td>0.529197</td>\n",
       "      <td>0.198843</td>\n",
       "      <td>0.378595</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.558172</td>\n",
       "      <td>0.544652</td>\n",
       "      <td>0.625590</td>\n",
       "      <td>0.300126</td>\n",
       "      <td>0.524678</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.755981</td>\n",
       "      <td>0.713308</td>\n",
       "      <td>0.743798</td>\n",
       "      <td>0.402718</td>\n",
       "      <td>0.677750</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.984424</td>\n",
       "      <td>0.980934</td>\n",
       "      <td>1.002146</td>\n",
       "      <td>0.807474</td>\n",
       "      <td>0.963300</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             temp       atemp    Humidity   windspeed       Count  Season_spring  Season_summer  Season_winter   Year_2019   Month_Aug   Month_Dec   Month_Feb   Month_Jan  Month_July  Month_June   Month_Mar   Month_May   Month_Nov   Month_Oct  Month_Sept  holiday_Yes  weekday_Mon  weekday_Sat  weekday_Sun  weekday_Thurs  weekday_Tues  weekday_Wed  workingday_Yes  Weather_Good/Clear  Weather_Moderate/Misty\n",
       "count  220.000000  220.000000  220.000000  220.000000  220.000000     220.000000     220.000000     220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000  220.000000   220.000000   220.000000   220.000000   220.000000     220.000000    220.000000   220.000000      220.000000          220.000000              220.000000\n",
       "mean     0.558718    0.532847    0.638221    0.313293    0.522154       0.254545       0.263636       0.236364    0.481818    0.059091    0.086364    0.100000    0.077273    0.104545    0.095455    0.054545    0.086364    0.072727    0.086364    0.086364     0.036364     0.154545     0.131818     0.172727       0.159091      0.118182     0.122727        0.640909            0.654545                0.318182\n",
       "std      0.233187    0.217401    0.148694    0.159584    0.219163       0.436599       0.441609       0.425817    0.500809    0.236333    0.281541    0.300684    0.267633    0.306665    0.294512    0.227609    0.281541    0.260281    0.281541    0.281541     0.187620     0.362295     0.339064     0.378873       0.366595      0.323559     0.328872        0.480828            0.476601                0.466833\n",
       "min      0.046591    0.025950    0.261915   -0.042808    0.048205       0.000000       0.000000       0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        0.000000            0.000000                0.000000\n",
       "25%      0.355429    0.344870    0.529197    0.198843    0.378595       0.000000       0.000000       0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        0.000000            0.000000                0.000000\n",
       "50%      0.558172    0.544652    0.625590    0.300126    0.524678       0.000000       0.000000       0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        1.000000            1.000000                0.000000\n",
       "75%      0.755981    0.713308    0.743798    0.402718    0.677750       1.000000       1.000000       0.000000    1.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000     0.000000     0.000000     0.000000     0.000000       0.000000      0.000000     0.000000        1.000000            1.000000                1.000000\n",
       "max      0.984424    0.980934    1.002146    0.807474    0.963300       1.000000       1.000000       1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000     1.000000     1.000000     1.000000     1.000000       1.000000      1.000000     1.000000        1.000000            1.000000                1.000000"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# variables after scaling the test data\n",
    "df_test_bike_new.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(220,)\n",
      "(220, 29)\n"
     ]
    }
   ],
   "source": [
    "# Dividing test set into X_test and y_test sets for the model building\n",
    "\n",
    "y_test = df_test_bike_new.pop('Count')\n",
    "X_test = df_test_bike_new\n",
    "\n",
    "print(y_test.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>temp</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Season_summer</th>\n",
       "      <th>Season_winter</th>\n",
       "      <th>Year_2019</th>\n",
       "      <th>Month_Sept</th>\n",
       "      <th>holiday_Yes</th>\n",
       "      <th>Weather_Good/Clear</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.831783</td>\n",
       "      <td>0.084219</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.901354</td>\n",
       "      <td>0.153728</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.511964</td>\n",
       "      <td>0.334206</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.881625</td>\n",
       "      <td>0.339570</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.817246</td>\n",
       "      <td>0.537414</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     const      temp  windspeed  Season_summer  Season_winter  Year_2019  Month_Sept  holiday_Yes  Weather_Good/Clear\n",
       "184    1.0  0.831783   0.084219              0              0          0           0            1                   0\n",
       "535    1.0  0.901354   0.153728              1              0          1           0            0                   1\n",
       "299    1.0  0.511964   0.334206              0              1          0           0            0                   0\n",
       "221    1.0  0.881625   0.339570              0              0          0           0            0                   1\n",
       "152    1.0  0.817246   0.537414              1              0          0           0            0                   1"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Selecting the variables that were part of final model (Model 8).\n",
    "col_test = X_train_rfe8.columns\n",
    "\n",
    "X_test = X_test[col_test]\n",
    "\n",
    "# Adding constant variable to test dataframe\n",
    "X_test_lm8 = sm.add_constant(X_test)\n",
    "\n",
    "X_test_lm8.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Making predictions using the final model (lr8)\n",
    "\n",
    "y_test_pred = lr8.predict(X_test_lm8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'y_test_pred')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting y_test and y_test_pred to understand the spread\n",
    "\n",
    "fig = plt.figure()\n",
    "plt.scatter(y_test, y_test_pred, alpha=.5)\n",
    "fig.suptitle('y_test vs y_test_pred', fontsize = 20)              # Plot heading \n",
    "plt.xlabel('y_test', fontsize = 18)                          # X-label\n",
    "plt.ylabel('y_test_pred', fontsize = 16) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**We can see there is linear relationship between y_test and y_test_pred**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### Residaul Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data r^2 : 78.32\n",
      "Train data r^2 : 80.84\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "r2_test = r2_score(y_test, y_test_pred)\n",
    "r2_train = r2_score(y_train, y_train_pred)\n",
    "\n",
    "print('Test data r^2 :',round((r2_test*100),2))\n",
    "print('Train data r^2 :',round((r2_train*100),2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adjusted R^2 Value for TEST\n",
    "\n",
    "$Adj r2 = 1-(1-R2)*(n-1)/(n-p-1)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data adjusted r^2 : 77.5\n",
      "Train data adjusted r^2 : 80.53\n"
     ]
    }
   ],
   "source": [
    "# n for test data ,n1 for train data is number of rows\n",
    "n = X_test.shape[0]\n",
    "n1 = X_train_rfe8.shape[0]\n",
    "\n",
    "# Number of features (predictors, p for test data, p1 for train data) is the number of columns\n",
    "p = X_test.shape[1]\n",
    "p1 = X_train_rfe8.shape[1]\n",
    "\n",
    "\n",
    "# We find the Adjusted R-squared using the formula\n",
    "\n",
    "adjusted_r2_test = 1-(1-r2_test)*(n-1)/(n-p-1)\n",
    "adjusted_r2_train = 1-(1-r2_train)*(n1-1)/(n1-p1-1)\n",
    "\n",
    "print('Test data adjusted r^2 :',round((adjusted_r2_test*100),2))\n",
    "print('Train data adjusted r^2 :',round((adjusted_r2_train*100),2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## FINAL RESULT COMPARISON: \n",
    "- Test data r^2 : 78.32\n",
    "- Train data r^2 : 80.84\n",
    "\n",
    "- Test data adjusted r^2 : 77.5\n",
    "- Train data adjusted r^2 : 80.53\n",
    "\n",
    "This seems to be a really good model that can very well 'Generalize' various datasets. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**As per our final Model, the below predictor variables influences bike booking :**\n",
    "- Temperature (temp)\n",
    "- September Month \n",
    "- Year -2019\n",
    "- Summer Seaon\n",
    "- Winter Seson\n",
    "- If its a holiday\n",
    "- If the weather is clear/Good\n",
    "- Speed of the Wind"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
